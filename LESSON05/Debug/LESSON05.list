
LESSON05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000056c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800062c  08000634  00010634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800062c  0800062c  00010634  2**0
                  CONTENTS
  4 .ARM          00000000  0800062c  0800062c  00010634  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800062c  08000634  00010634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800062c  0800062c  0001062c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000630  08000630  00010630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000000  08000634  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000634  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010634  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000047e  00000000  00000000  0001065c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002c7  00000000  00000000  00010ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f0  00000000  00000000  00010da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a8  00000000  00000000  00010e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001a84  00000000  00000000  00010f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004bd  00000000  00000000  000129c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009d0d  00000000  00000000  00012e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001cb8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000218  00000000  00000000  0001cbe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000614 	.word	0x08000614

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000614 	.word	0x08000614

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LED_Ini>:
 *
 *
 */

uint32_t LED_Ini(uint32_t prmi)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

	/* --- HARDWARE ------------------------------------------------------ */

	*GPIOB_ODR &= ~0x00000008;		/* PB3 @ 0 -LED apagado- */
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <LED_Ini+0x3c>)
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <LED_Ini+0x3c>)
 800022e:	2108      	movs	r1, #8
 8000230:	438a      	bics	r2, r1
 8000232:	601a      	str	r2, [r3, #0]

	*GPIOB_MODER &= ~0x00000080;	/* PB3 como ... */
 8000234:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <LED_Ini+0x40>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <LED_Ini+0x40>)
 800023a:	2180      	movs	r1, #128	; 0x80
 800023c:	438a      	bics	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |=  0x00000040;	/* ... salida */
 8000240:	4b07      	ldr	r3, [pc, #28]	; (8000260 <LED_Ini+0x40>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b06      	ldr	r3, [pc, #24]	; (8000260 <LED_Ini+0x40>)
 8000246:	2140      	movs	r1, #64	; 0x40
 8000248:	430a      	orrs	r2, r1
 800024a:	601a      	str	r2, [r3, #0]

	/* --- VARIABLES ----------------------------------------------------- */

    imagLED = LED_INITIAL_STAT;
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <LED_Ini+0x44>)
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <LED_Ini+0x48>)
 8000250:	601a      	str	r2, [r3, #0]

	/* --- FINAL DE INICIALIZACIONES ------------------------------------- */

    return(0);
 8000252:	2300      	movs	r3, #0
}
 8000254:	0018      	movs	r0, r3
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}
 800025c:	48000414 	.word	0x48000414
 8000260:	48000400 	.word	0x48000400
 8000264:	2000003c 	.word	0x2000003c
 8000268:	55555555 	.word	0x55555555

0800026c <LED_Per>:
 * del LED en función del estado del bit que corresponde en cada instante.
 *
 */

void LED_Per()
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
static uint32_t phase;

	/* --- MÁSCARA DEL BIT PARA EXTRAER SEGÚN EL MOMENTO ----------------- */

  	uint32_t mask;
  	mask = 1 << ((phase / PREDIV) %32);
 8000272:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <LED_Per+0x58>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	217d      	movs	r1, #125	; 0x7d
 8000278:	0018      	movs	r0, r3
 800027a:	f7ff ff45 	bl	8000108 <__udivsi3>
 800027e:	0003      	movs	r3, r0
 8000280:	001a      	movs	r2, r3
 8000282:	231f      	movs	r3, #31
 8000284:	4013      	ands	r3, r2
 8000286:	2201      	movs	r2, #1
 8000288:	409a      	lsls	r2, r3
 800028a:	0013      	movs	r3, r2
 800028c:	607b      	str	r3, [r7, #4]

  	/* --- ACTUALIZACIÓN DEL ESTADO DEL LED ------------------------------ */

  	if( (mask & imagLED) == 0)
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <LED_Per+0x5c>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	4013      	ands	r3, r2
 8000296:	d106      	bne.n	80002a6 <LED_Per+0x3a>
  	{
  	    *GPIOB_ODR &= ~0x00000008;		/* PB3 = 0 (apaga LED) */
 8000298:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <LED_Per+0x60>)
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <LED_Per+0x60>)
 800029e:	2108      	movs	r1, #8
 80002a0:	438a      	bics	r2, r1
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	e005      	b.n	80002b2 <LED_Per+0x46>
  	}
  	else
  	{
  	    *GPIOB_ODR |=  0x00000008;		/* PB3 = 1 (enciende LED) */
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <LED_Per+0x60>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	4b08      	ldr	r3, [pc, #32]	; (80002cc <LED_Per+0x60>)
 80002ac:	2108      	movs	r1, #8
 80002ae:	430a      	orrs	r2, r1
 80002b0:	601a      	str	r2, [r3, #0]
  	}

  	/* --- INCREMENTO DE CONTADOR ---------------------------------------- */

  	++phase;
 80002b2:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <LED_Per+0x58>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	1c5a      	adds	r2, r3, #1
 80002b8:	4b02      	ldr	r3, [pc, #8]	; (80002c4 <LED_Per+0x58>)
 80002ba:	601a      	str	r2, [r3, #0]

	/* --- FINAL DE LA RUTINA PERIÓDICA ---------------------------------- */

}
 80002bc:	46c0      	nop			; (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	b002      	add	sp, #8
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	2000001c 	.word	0x2000001c
 80002c8:	2000003c 	.word	0x2000003c
 80002cc:	48000414 	.word	0x48000414

080002d0 <LED_Set>:
 * FIJAR UN ESTADO DEL LED
 * --------------------------------------------------------------------------
 * *********************************************************************** */

uint32_t LED_Set(uint32_t nstat)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	imagLED = nstat;
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <LED_Set+0x1c>)
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	601a      	str	r2, [r3, #0]
	return(imagLED);
 80002de:	4b03      	ldr	r3, [pc, #12]	; (80002ec <LED_Set+0x1c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
}
 80002e2:	0018      	movs	r0, r3
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b002      	add	sp, #8
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	2000003c 	.word	0x2000003c

080002f0 <SWITCH_Ini>:
 *
 *
 */

uint32_t SWITCH_Ini(uint32_t prmi)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]

	/* --- INICIALIZACIÓN DE HARDWARE ------------------------------------ */

	*GPIOB_PUPDR &= ~0x0000000F; 		/* PB0, PB1... */
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <SWITCH_Ini+0x54>)
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <SWITCH_Ini+0x54>)
 80002fe:	210f      	movs	r1, #15
 8000300:	438a      	bics	r2, r1
 8000302:	601a      	str	r2, [r3, #0]
	*GPIOB_PUPDR |=  0x00000005;  		/* ... pull.up */
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <SWITCH_Ini+0x54>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <SWITCH_Ini+0x54>)
 800030a:	2105      	movs	r1, #5
 800030c:	430a      	orrs	r2, r1
 800030e:	601a      	str	r2, [r3, #0]

	*GPIOA_MODER &= ~0x0000000F;		/* PB0 y PB1... entradas */
 8000310:	2390      	movs	r3, #144	; 0x90
 8000312:	05db      	lsls	r3, r3, #23
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	2390      	movs	r3, #144	; 0x90
 8000318:	05db      	lsls	r3, r3, #23
 800031a:	210f      	movs	r1, #15
 800031c:	438a      	bics	r2, r1
 800031e:	601a      	str	r2, [r3, #0]

	/* --- INICIALIZACIÓN DE VARIABLES ----------------------------------- */

    switch1Input = 0x00000000;			/* Inicialmente no pusada */
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <SWITCH_Ini+0x58>)
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
    switch2Input = 0x00000000;			/* Inicialmente no pusada */
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <SWITCH_Ini+0x5c>)
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]

    switch1Stat = 0x00000000;			/* Inicialmente no pusada */
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <SWITCH_Ini+0x60>)
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
    switch2Stat = 0x00000000;			/* Inicialmente no pusada */
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <SWITCH_Ini+0x64>)
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]

	/* --- FINAL DE INICIALIZACIONES ------------------------------------- */

	return(0);
 8000338:	2300      	movs	r3, #0
}
 800033a:	0018      	movs	r0, r3
 800033c:	46bd      	mov	sp, r7
 800033e:	b002      	add	sp, #8
 8000340:	bd80      	pop	{r7, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	4800040c 	.word	0x4800040c
 8000348:	20000020 	.word	0x20000020
 800034c:	20000024 	.word	0x20000024
 8000350:	20000028 	.word	0x20000028
 8000354:	2000002c 	.word	0x2000002c

08000358 <SWITCH_Per>:
 * \todo	DETECCIÓN DE FLANCOS DE ENTRADA Y DE SALIDA y AUTOREPETICIÓN
 *
 */

void SWITCH_Per()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	/* --- ACTUALIZAR LAS IMÁGENES MEMORIZADAS DE LA ENTRADA ------------- */

	switch1Input = switch1Input << 1;		/* Desplazar estado anterior */
 800035c:	4b2a      	ldr	r3, [pc, #168]	; (8000408 <SWITCH_Per+0xb0>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	005a      	lsls	r2, r3, #1
 8000362:	4b29      	ldr	r3, [pc, #164]	; (8000408 <SWITCH_Per+0xb0>)
 8000364:	601a      	str	r2, [r3, #0]
	if((*GPIOB_IDR & 0x00000001) == 0)		/* ¿Pulsador 1 pulsado? */
 8000366:	4b29      	ldr	r3, [pc, #164]	; (800040c <SWITCH_Per+0xb4>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2201      	movs	r2, #1
 800036c:	4013      	ands	r3, r2
 800036e:	d104      	bne.n	800037a <SWITCH_Per+0x22>
	{
		switch1Input += 1;		/* Sí, nuevo bit es 1 */
 8000370:	4b25      	ldr	r3, [pc, #148]	; (8000408 <SWITCH_Per+0xb0>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	1c5a      	adds	r2, r3, #1
 8000376:	4b24      	ldr	r3, [pc, #144]	; (8000408 <SWITCH_Per+0xb0>)
 8000378:	601a      	str	r2, [r3, #0]
	}

	switch2Input = switch2Input << 1;		/* Desplazar estado anterior */
 800037a:	4b25      	ldr	r3, [pc, #148]	; (8000410 <SWITCH_Per+0xb8>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	005a      	lsls	r2, r3, #1
 8000380:	4b23      	ldr	r3, [pc, #140]	; (8000410 <SWITCH_Per+0xb8>)
 8000382:	601a      	str	r2, [r3, #0]
	if((*GPIOB_IDR & 0x00000002) == 0)		/* ¿Pulsador 1 pulsado? */
 8000384:	4b21      	ldr	r3, [pc, #132]	; (800040c <SWITCH_Per+0xb4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2202      	movs	r2, #2
 800038a:	4013      	ands	r3, r2
 800038c:	d104      	bne.n	8000398 <SWITCH_Per+0x40>
	{
		switch2Input += 1;		/* Sí, nuevo bit es 1 */
 800038e:	4b20      	ldr	r3, [pc, #128]	; (8000410 <SWITCH_Per+0xb8>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	1c5a      	adds	r2, r3, #1
 8000394:	4b1e      	ldr	r3, [pc, #120]	; (8000410 <SWITCH_Per+0xb8>)
 8000396:	601a      	str	r2, [r3, #0]
	}

	/* --- ACTUALIZAR EL ESTADO ------------------------------------------ */

	if( (switch1Input & MASK) == 0)
 8000398:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <SWITCH_Per+0xb0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	051b      	lsls	r3, r3, #20
 800039e:	0d1b      	lsrs	r3, r3, #20
 80003a0:	d107      	bne.n	80003b2 <SWITCH_Per+0x5a>
	{
		switch1Stat &= ~SWITCH_BIT_ACTUALSTAT;
 80003a2:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <SWITCH_Per+0xbc>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2201      	movs	r2, #1
 80003a8:	4393      	bics	r3, r2
 80003aa:	001a      	movs	r2, r3
 80003ac:	4b19      	ldr	r3, [pc, #100]	; (8000414 <SWITCH_Per+0xbc>)
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	e00c      	b.n	80003cc <SWITCH_Per+0x74>
	}
	else if( (switch1Input & MASK) == MASK)
 80003b2:	4b15      	ldr	r3, [pc, #84]	; (8000408 <SWITCH_Per+0xb0>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	051b      	lsls	r3, r3, #20
 80003b8:	0d1b      	lsrs	r3, r3, #20
 80003ba:	4a17      	ldr	r2, [pc, #92]	; (8000418 <SWITCH_Per+0xc0>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d105      	bne.n	80003cc <SWITCH_Per+0x74>
	{
		switch1Stat |= SWITCH_BIT_ACTUALSTAT;
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <SWITCH_Per+0xbc>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2201      	movs	r2, #1
 80003c6:	431a      	orrs	r2, r3
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <SWITCH_Per+0xbc>)
 80003ca:	601a      	str	r2, [r3, #0]
	}

	if( (switch2Input & MASK) == 0)
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <SWITCH_Per+0xb8>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	051b      	lsls	r3, r3, #20
 80003d2:	0d1b      	lsrs	r3, r3, #20
 80003d4:	d107      	bne.n	80003e6 <SWITCH_Per+0x8e>
	{
		switch2Stat &= ~SWITCH_BIT_ACTUALSTAT;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <SWITCH_Per+0xc4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2201      	movs	r2, #1
 80003dc:	4393      	bics	r3, r2
 80003de:	001a      	movs	r2, r3
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <SWITCH_Per+0xc4>)
 80003e2:	601a      	str	r2, [r3, #0]
	/* --- DETECCIÓN DE FLANCOS? AUTOREPETICIÓN? ------------------------- */

		// EN DESARROLLO !!!!!!!!!!!!!!!!!!!!!!!!

    /* --- FINAL DE LA RUTINA PERIÓDICA ---------------------------------- */
}
 80003e4:	e00c      	b.n	8000400 <SWITCH_Per+0xa8>
	else if( (switch2Input & MASK) == MASK)
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <SWITCH_Per+0xb8>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	051b      	lsls	r3, r3, #20
 80003ec:	0d1b      	lsrs	r3, r3, #20
 80003ee:	4a0a      	ldr	r2, [pc, #40]	; (8000418 <SWITCH_Per+0xc0>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d105      	bne.n	8000400 <SWITCH_Per+0xa8>
		switch2Stat |= SWITCH_BIT_ACTUALSTAT;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <SWITCH_Per+0xc4>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2201      	movs	r2, #1
 80003fa:	431a      	orrs	r2, r3
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <SWITCH_Per+0xc4>)
 80003fe:	601a      	str	r2, [r3, #0]
}
 8000400:	46c0      	nop			; (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	20000020 	.word	0x20000020
 800040c:	48000410 	.word	0x48000410
 8000410:	20000024 	.word	0x20000024
 8000414:	20000028 	.word	0x20000028
 8000418:	00000fff 	.word	0x00000fff
 800041c:	2000002c 	.word	0x2000002c

08000420 <SWITCH_GetSW1>:
 * \todo	Considear PROCESO, borrado de flags y condiciones de carrera
 *
 */

uint32_t SWITCH_GetSW1()
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
    return(switch1Stat);
 8000424:	4b02      	ldr	r3, [pc, #8]	; (8000430 <SWITCH_GetSW1+0x10>)
 8000426:	681b      	ldr	r3, [r3, #0]
}
 8000428:	0018      	movs	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	20000028 	.word	0x20000028

08000434 <SWITCH_GetSW2>:
 * \todo	Considear PROCESO, borrado de flags y condiciones de carrera
 *
 */

uint32_t SWITCH_GetSW2()
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
    return(switch2Stat);
 8000438:	4b02      	ldr	r3, [pc, #8]	; (8000444 <SWITCH_GetSW2+0x10>)
 800043a:	681b      	ldr	r3, [r3, #0]
}
 800043c:	0018      	movs	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	2000002c 	.word	0x2000002c

08000448 <SYSTEM_Ini>:
 * INICIALIZACIÓN DEL SISTEMA
 * --------------------------------------------------------------------------
 * *********************************************************************** */

uint32_t SYSTEM_Ini(uint32_t prmi)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]

	// Pendiente. Se emplea el reloj de 8 MHz tras el arranque

	/* --- ACTIVAR TODOS LOS PUERTOS ------------------------------------- */

	*RCC_AHBENR |= 0x007E0000;  /* Activa reloj hacia los puertos E/S */
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <SYSTEM_Ini+0x60>)
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <SYSTEM_Ini+0x60>)
 8000456:	21fc      	movs	r1, #252	; 0xfc
 8000458:	03c9      	lsls	r1, r1, #15
 800045a:	430a      	orrs	r2, r1
 800045c:	601a      	str	r2, [r3, #0]

	/* --- INICIALIZACIONES: MÓDULOS ------------------------------------- */

    LED_Ini(0);
 800045e:	2000      	movs	r0, #0
 8000460:	f7ff fede 	bl	8000220 <LED_Ini>
    SWITCH_Ini(0);
 8000464:	2000      	movs	r0, #0
 8000466:	f7ff ff43 	bl	80002f0 <SWITCH_Ini>

    // Pendiente. Se hacen las pruebas sin ello

    /* ---- INICIALIZACIONES: TEMPORIZADOR DE SISTEMA -------------------- */

    *STK_RVR = (CLOCK/RITHM) - 1;         /* Top value */
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <SYSTEM_Ini+0x64>)
 800046c:	4a10      	ldr	r2, [pc, #64]	; (80004b0 <SYSTEM_Ini+0x68>)
 800046e:	601a      	str	r2, [r3, #0]

    *STK_CSR = 0x0005;              /* Enable & select processor clock */
 8000470:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <SYSTEM_Ini+0x6c>)
 8000472:	2205      	movs	r2, #5
 8000474:	601a      	str	r2, [r3, #0]
    *STK_CSR |= 0x0002;            /* Enable interrupt request */
 8000476:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <SYSTEM_Ini+0x6c>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <SYSTEM_Ini+0x6c>)
 800047c:	2102      	movs	r1, #2
 800047e:	430a      	orrs	r2, r1
 8000480:	601a      	str	r2, [r3, #0]

    *SHPR3 &= ~0x33000000;         /* Low priority (high value) */
 8000482:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <SYSTEM_Ini+0x70>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <SYSTEM_Ini+0x70>)
 8000488:	490c      	ldr	r1, [pc, #48]	; (80004bc <SYSTEM_Ini+0x74>)
 800048a:	400a      	ands	r2, r1
 800048c:	601a      	str	r2, [r3, #0]
    *SHPR3 |=  0xCC000000;         /* Low priority (high value) */
 800048e:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <SYSTEM_Ini+0x70>)
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <SYSTEM_Ini+0x70>)
 8000494:	21cc      	movs	r1, #204	; 0xcc
 8000496:	0609      	lsls	r1, r1, #24
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]

    //Algunos módulos pueden requierir un tiempo para estabilziarse

    /* --- FINAL DE INICIALIZACIONES ------------------------------------- */

    return(0);
 800049c:	2300      	movs	r3, #0

}
 800049e:	0018      	movs	r0, r3
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	40021014 	.word	0x40021014
 80004ac:	e000e014 	.word	0xe000e014
 80004b0:	00001f3f 	.word	0x00001f3f
 80004b4:	e000e010 	.word	0xe000e010
 80004b8:	e000ed20 	.word	0xe000ed20
 80004bc:	ccffffff 	.word	0xccffffff

080004c0 <SysTick_Handler>:
 * ATENCIÓN A LA INTERRUPCIÓN DEL TEMPORIZADOR DE SISTEMA
 * --------------------------------------------------------------------------
 * *********************************************************************** */

void SysTick_Handler()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0

	/* --- ACTUALIZACIÓN DE LOS MÓDULOS @ 1kHz --------------------------- */

	LED_Per();
 80004c4:	f7ff fed2 	bl	800026c <LED_Per>
	SWITCH_Per();
 80004c8:	f7ff ff46 	bl	8000358 <SWITCH_Per>

	/* --- TEMPORIZADOR DE TIEMPO ACTIVO --------------------------------- */

	++tiempoon;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <SysTick_Handler+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	1c5a      	adds	r2, r3, #1
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <SysTick_Handler+0x40>)
 80004d4:	601a      	str	r2, [r3, #0]

	/* --- TEMPORIZADORES DE APLICACIÓN ---------------------------------- */

	if(tiempo1 != 0)
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <SysTick_Handler+0x44>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d004      	beq.n	80004e8 <SysTick_Handler+0x28>
	{
		--tiempo1;
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <SysTick_Handler+0x44>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	1e5a      	subs	r2, r3, #1
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <SysTick_Handler+0x44>)
 80004e6:	601a      	str	r2, [r3, #0]
	}
	if(tiempo2 != 0)
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <SysTick_Handler+0x48>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d004      	beq.n	80004fa <SysTick_Handler+0x3a>
	{
		--tiempo2;
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <SysTick_Handler+0x48>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	1e5a      	subs	r2, r3, #1
 80004f6:	4b04      	ldr	r3, [pc, #16]	; (8000508 <SysTick_Handler+0x48>)
 80004f8:	601a      	str	r2, [r3, #0]
	}

	/* --- FINAL DE LA INTERRUPCIÓN -------------------------------------- */

}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000030 	.word	0x20000030
 8000504:	20000034 	.word	0x20000034
 8000508:	20000038 	.word	0x20000038

0800050c <main>:
 * APLICACIÓN PRINCIPAL
 * --------------------------------------------------------------------------
 ************************************************************************* */

int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0

    /* --- INICIALIZACIONES. SISTEMA ------------------------------------- */

	SYSTEM_Ini(0);
 8000512:	2000      	movs	r0, #0
 8000514:	f7ff ff98 	bl	8000448 <SYSTEM_Ini>
	/* --- BUCLE PRINCIPAL ----------------------------------------------- */

	for(;;)
	{

		uint32_t stat1 = SWITCH_GetSW1() & SWITCH_BIT_ACTUALSTAT;
 8000518:	f7ff ff82 	bl	8000420 <SWITCH_GetSW1>
 800051c:	0003      	movs	r3, r0
 800051e:	2201      	movs	r2, #1
 8000520:	4013      	ands	r3, r2
 8000522:	607b      	str	r3, [r7, #4]
		uint32_t stat2 = SWITCH_GetSW2() & SWITCH_BIT_ACTUALSTAT;
 8000524:	f7ff ff86 	bl	8000434 <SWITCH_GetSW2>
 8000528:	0003      	movs	r3, r0
 800052a:	2201      	movs	r2, #1
 800052c:	4013      	ands	r3, r2
 800052e:	603b      	str	r3, [r7, #0]

		if( (stat1 != 0) && (stat2 != 0) )
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d008      	beq.n	8000548 <main+0x3c>
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d005      	beq.n	8000548 <main+0x3c>
		{
		    LED_Set(0xFFFFFFFF);
 800053c:	2301      	movs	r3, #1
 800053e:	425b      	negs	r3, r3
 8000540:	0018      	movs	r0, r3
 8000542:	f7ff fec5 	bl	80002d0 <LED_Set>
 8000546:	e012      	b.n	800056e <main+0x62>
		}
		else if (stat1 != 0)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d004      	beq.n	8000558 <main+0x4c>
		{
			LED_Set(0x55555555);
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <main+0x64>)
 8000550:	0018      	movs	r0, r3
 8000552:	f7ff febd 	bl	80002d0 <LED_Set>
 8000556:	e7df      	b.n	8000518 <main+0xc>
		}
		else if (stat2 != 0)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d004      	beq.n	8000568 <main+0x5c>
		{
			LED_Set(0xFF00FF00);
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <main+0x68>)
 8000560:	0018      	movs	r0, r3
 8000562:	f7ff feb5 	bl	80002d0 <LED_Set>
 8000566:	e7d7      	b.n	8000518 <main+0xc>
		}
		else
		{
			LED_Set(0x00000000);
 8000568:	2000      	movs	r0, #0
 800056a:	f7ff feb1 	bl	80002d0 <LED_Set>
	{
 800056e:	e7d3      	b.n	8000518 <main+0xc>
 8000570:	55555555 	.word	0x55555555
 8000574:	ff00ff00 	.word	0xff00ff00

08000578 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000578:	480d      	ldr	r0, [pc, #52]	; (80005b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800057a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800057c:	e000      	b.n	8000580 <Reset_Handler+0x8>
 800057e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000582:	490d      	ldr	r1, [pc, #52]	; (80005b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <LoopForever+0xe>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000588:	e002      	b.n	8000590 <LoopCopyDataInit>

0800058a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800058c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058e:	3304      	adds	r3, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000594:	d3f9      	bcc.n	800058a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000598:	4c0a      	ldr	r4, [pc, #40]	; (80005c4 <LoopForever+0x16>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800059c:	e001      	b.n	80005a2 <LoopFillZerobss>

0800059e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a0:	3204      	adds	r2, #4

080005a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a4:	d3fb      	bcc.n	800059e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005a6:	f000 f811 	bl	80005cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005aa:	f7ff ffaf 	bl	800050c <main>

080005ae <LoopForever>:

LoopForever:
    b LoopForever
 80005ae:	e7fe      	b.n	80005ae <LoopForever>
  ldr   r0, =_estack
 80005b0:	20001800 	.word	0x20001800
  ldr r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005bc:	08000634 	.word	0x08000634
  ldr r2, =_sbss
 80005c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005c4:	20000040 	.word	0x20000040

080005c8 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC_COMP_IRQHandler>
	...

080005cc <__libc_init_array>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	2600      	movs	r6, #0
 80005d0:	4d0c      	ldr	r5, [pc, #48]	; (8000604 <__libc_init_array+0x38>)
 80005d2:	4c0d      	ldr	r4, [pc, #52]	; (8000608 <__libc_init_array+0x3c>)
 80005d4:	1b64      	subs	r4, r4, r5
 80005d6:	10a4      	asrs	r4, r4, #2
 80005d8:	42a6      	cmp	r6, r4
 80005da:	d109      	bne.n	80005f0 <__libc_init_array+0x24>
 80005dc:	2600      	movs	r6, #0
 80005de:	f000 f819 	bl	8000614 <_init>
 80005e2:	4d0a      	ldr	r5, [pc, #40]	; (800060c <__libc_init_array+0x40>)
 80005e4:	4c0a      	ldr	r4, [pc, #40]	; (8000610 <__libc_init_array+0x44>)
 80005e6:	1b64      	subs	r4, r4, r5
 80005e8:	10a4      	asrs	r4, r4, #2
 80005ea:	42a6      	cmp	r6, r4
 80005ec:	d105      	bne.n	80005fa <__libc_init_array+0x2e>
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	00b3      	lsls	r3, r6, #2
 80005f2:	58eb      	ldr	r3, [r5, r3]
 80005f4:	4798      	blx	r3
 80005f6:	3601      	adds	r6, #1
 80005f8:	e7ee      	b.n	80005d8 <__libc_init_array+0xc>
 80005fa:	00b3      	lsls	r3, r6, #2
 80005fc:	58eb      	ldr	r3, [r5, r3]
 80005fe:	4798      	blx	r3
 8000600:	3601      	adds	r6, #1
 8000602:	e7f2      	b.n	80005ea <__libc_init_array+0x1e>
 8000604:	0800062c 	.word	0x0800062c
 8000608:	0800062c 	.word	0x0800062c
 800060c:	0800062c 	.word	0x0800062c
 8000610:	08000630 	.word	0x08000630

08000614 <_init>:
 8000614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061a:	bc08      	pop	{r3}
 800061c:	469e      	mov	lr, r3
 800061e:	4770      	bx	lr

08000620 <_fini>:
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000626:	bc08      	pop	{r3}
 8000628:	469e      	mov	lr, r3
 800062a:	4770      	bx	lr
