
LESSON05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a48  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b08  08000b10  00010b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b08  08000b08  00010b10  2**0
                  CONTENTS
  4 .ARM          00000000  08000b08  08000b08  00010b10  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b08  08000b10  00010b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b08  08000b08  00010b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b0c  08000b0c  00010b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000000  08000b10  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08000b10  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010b10  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bc8  00000000  00000000  00010b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000792  00000000  00000000  00011700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000268  00000000  00000000  00011e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b0  00000000  00000000  00012100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001da8  00000000  00000000  000122b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d3e  00000000  00000000  00014058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a0bd  00000000  00000000  00014d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001ee53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000059c  00000000  00000000  0001eea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000af0 	.word	0x08000af0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000af0 	.word	0x08000af0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <ANALOG_Ini>:
 * INICIALIZACIÓN
 * ------------------------------------------------------------------------
 *********************************************************************** */

uint32_t ANALOG_Ini(uint32_t prmi)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]


	/* --- FINAL DE INICIALIZACIONES ----------------------------------- */

	return(0);
 8000228:	2300      	movs	r3, #0
}
 800022a:	0018      	movs	r0, r3
 800022c:	46bd      	mov	sp, r7
 800022e:	b002      	add	sp, #8
 8000230:	bd80      	pop	{r7, pc}

08000232 <ANALOG_Per>:
 * PERIÓDICA
 * ------------------------------------------------------------------------
 *********************************************************************** */

void ANALOG_Per()
{
 8000232:	b580      	push	{r7, lr}
 8000234:	af00      	add	r7, sp, #0


}
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <BUZZER_Ini>:
 * INICIALIZACIÓN
 * ------------------------------------------------------------------------
 *********************************************************************** */

uint32_t BUZZER_Ini(uint32_t prmi)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]


	/* --- FINAL DE INICIALIZACIONES ----------------------------------- */

	return(0);
 8000244:	2300      	movs	r3, #0
}
 8000246:	0018      	movs	r0, r3
 8000248:	46bd      	mov	sp, r7
 800024a:	b002      	add	sp, #8
 800024c:	bd80      	pop	{r7, pc}

0800024e <BUZZER_Per>:
 * PERIÓDICA
 * ------------------------------------------------------------------------
 *********************************************************************** */

void BUZZER_Per()
{
 800024e:	b580      	push	{r7, lr}
 8000250:	af00      	add	r7, sp, #0


}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <CAN_Ini>:
 * INICIALIZACIÓN
 * ------------------------------------------------------------------------
 *********************************************************************** */

uint32_t CAN_Ini(uint32_t prmi)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	return(0);
 8000260:	2300      	movs	r3, #0
}
 8000262:	0018      	movs	r0, r3
 8000264:	46bd      	mov	sp, r7
 8000266:	b002      	add	sp, #8
 8000268:	bd80      	pop	{r7, pc}

0800026a <CAN_Per>:
 * PERIÓDICA
 * ------------------------------------------------------------------------
 *********************************************************************** */

void CAN_Per()
{
 800026a:	b580      	push	{r7, lr}
 800026c:	af00      	add	r7, sp, #0

}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <CEC_CAN_IRQHandler>:
 * INTERRUPCIÓN PROPIA
 * ------------------------------------------------------------------------
 *********************************************************************** */

void CEC_CAN_IRQHandler()
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0

}
 8000278:	46c0      	nop			; (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <I2CS_Ini>:
 * INICIALIZACIÓN
 * ------------------------------------------------------------------------
 *********************************************************************** */

uint32_t I2CS_Ini(uint32_t prmi)
{
 800027e:	b580      	push	{r7, lr}
 8000280:	b082      	sub	sp, #8
 8000282:	af00      	add	r7, sp, #0
 8000284:	6078      	str	r0, [r7, #4]

	return(0);
 8000286:	2300      	movs	r3, #0
}
 8000288:	0018      	movs	r0, r3
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}

08000290 <I2CS_Per>:
 * PERIÓDICA
 * ------------------------------------------------------------------------
 *********************************************************************** */

void I2CS_Per()
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

}
 8000294:	46c0      	nop			; (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}

0800029a <I2C1_IRQHandler>:
 * INTERRUPCIÓN PROPIA
 * ------------------------------------------------------------------------
 *********************************************************************** */

void I2C1_IRQHandler()
{
 800029a:	b580      	push	{r7, lr}
 800029c:	af00      	add	r7, sp, #0

}
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <LED_Ini>:
 *
 *
 */

uint32_t LED_Ini(uint32_t prmi)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]

	/* --- HARDWARE ------------------------------------------------------ */

	*GPIOB_ODR &= ~0x00000008;		/* PB3 @ 0 -LED apagado- */
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <LED_Ini+0x3c>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <LED_Ini+0x3c>)
 80002b2:	2108      	movs	r1, #8
 80002b4:	438a      	bics	r2, r1
 80002b6:	601a      	str	r2, [r3, #0]

	*GPIOB_MODER &= ~0x00000080;	/* PB3 como ... */
 80002b8:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <LED_Ini+0x40>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <LED_Ini+0x40>)
 80002be:	2180      	movs	r1, #128	; 0x80
 80002c0:	438a      	bics	r2, r1
 80002c2:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |=  0x00000040;	/* ... salida */
 80002c4:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <LED_Ini+0x40>)
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <LED_Ini+0x40>)
 80002ca:	2140      	movs	r1, #64	; 0x40
 80002cc:	430a      	orrs	r2, r1
 80002ce:	601a      	str	r2, [r3, #0]

	/* --- VARIABLES ----------------------------------------------------- */

    imagLED = LED_INITIAL_STAT;
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <LED_Ini+0x44>)
 80002d2:	4a06      	ldr	r2, [pc, #24]	; (80002ec <LED_Ini+0x48>)
 80002d4:	601a      	str	r2, [r3, #0]

	/* --- FINAL DE INICIALIZACIONES ------------------------------------- */

    return(0);
 80002d6:	2300      	movs	r3, #0
}
 80002d8:	0018      	movs	r0, r3
 80002da:	46bd      	mov	sp, r7
 80002dc:	b002      	add	sp, #8
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	48000414 	.word	0x48000414
 80002e4:	48000400 	.word	0x48000400
 80002e8:	20000254 	.word	0x20000254
 80002ec:	55555555 	.word	0x55555555

080002f0 <LED_Per>:
 * del LED en función del estado del bit que corresponde en cada instante.
 *
 */

void LED_Per()
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
static uint32_t phase;

	/* --- MÁSCARA DEL BIT PARA EXTRAER SEGÚN EL MOMENTO ----------------- */

  	uint32_t mask;
  	mask = 1 << ((phase / PREDIV) %32);
 80002f6:	4b14      	ldr	r3, [pc, #80]	; (8000348 <LED_Per+0x58>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	217d      	movs	r1, #125	; 0x7d
 80002fc:	0018      	movs	r0, r3
 80002fe:	f7ff ff03 	bl	8000108 <__udivsi3>
 8000302:	0003      	movs	r3, r0
 8000304:	001a      	movs	r2, r3
 8000306:	231f      	movs	r3, #31
 8000308:	4013      	ands	r3, r2
 800030a:	2201      	movs	r2, #1
 800030c:	409a      	lsls	r2, r3
 800030e:	0013      	movs	r3, r2
 8000310:	607b      	str	r3, [r7, #4]

  	/* --- ACTUALIZACIÓN DEL ESTADO DEL LED ------------------------------ */

  	if( (mask & imagLED) == 0)
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <LED_Per+0x5c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	4013      	ands	r3, r2
 800031a:	d106      	bne.n	800032a <LED_Per+0x3a>
  	{
  	    *GPIOB_ODR &= ~0x00000008;		/* PB3 = 0 (apaga LED) */
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <LED_Per+0x60>)
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <LED_Per+0x60>)
 8000322:	2108      	movs	r1, #8
 8000324:	438a      	bics	r2, r1
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	e005      	b.n	8000336 <LED_Per+0x46>
  	}
  	else
  	{
  	    *GPIOB_ODR |=  0x00000008;		/* PB3 = 1 (enciende LED) */
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <LED_Per+0x60>)
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <LED_Per+0x60>)
 8000330:	2108      	movs	r1, #8
 8000332:	430a      	orrs	r2, r1
 8000334:	601a      	str	r2, [r3, #0]
  	}

  	/* --- INCREMENTO DE CONTADOR ---------------------------------------- */

  	++phase;
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <LED_Per+0x58>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	4b02      	ldr	r3, [pc, #8]	; (8000348 <LED_Per+0x58>)
 800033e:	601a      	str	r2, [r3, #0]

	/* --- FINAL DE LA RUTINA PERIÓDICA ---------------------------------- */

}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}
 8000348:	2000001c 	.word	0x2000001c
 800034c:	20000254 	.word	0x20000254
 8000350:	48000414 	.word	0x48000414

08000354 <LEDD_Ini>:
 * INICIALIZACIÓN
 * ------------------------------------------------------------------------
 *********************************************************************** */

uint32_t LEDD_Ini(uint32_t prmi)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]


	/* --- FINAL DE INICIALIZACIONES ----------------------------------- */

	return(0);
 800035c:	2300      	movs	r3, #0
}
 800035e:	0018      	movs	r0, r3
 8000360:	46bd      	mov	sp, r7
 8000362:	b002      	add	sp, #8
 8000364:	bd80      	pop	{r7, pc}

08000366 <LEDD_Per>:
 * PERIÓDICA
 * ------------------------------------------------------------------------
 *********************************************************************** */

void LEDD_Per()
{
 8000366:	b580      	push	{r7, lr}
 8000368:	af00      	add	r7, sp, #0


}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <RELOJ_Ini>:
 * INICIALIZACIÓN
 * ------------------------------------------------------------------------
 *********************************************************************** */

uint32_t RELOJ_Ini(uint32_t prmi)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	/* --- SELECCIONAR LA FRECUENCIA ENTRE LAS DISPOIBLES -------------- */


	/* --- FINAL DE INICIALIZACIONES ----------------------------------- */

	return(0);
 8000378:	2300      	movs	r3, #0
}
 800037a:	0018      	movs	r0, r3
 800037c:	46bd      	mov	sp, r7
 800037e:	b002      	add	sp, #8
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <RELOJ_GetFreq>:
 *
 *
 */

uint32_t RELOJ_GetFreq()
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	return(8000000);
 8000388:	4b01      	ldr	r3, [pc, #4]	; (8000390 <RELOJ_GetFreq+0xc>)
}
 800038a:	0018      	movs	r0, r3
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	007a1200 	.word	0x007a1200

08000394 <Buffer_Ini>:
 *  INICIALIZAR EL SUB-MÓDULO DE BUFFERS
 *  -------------------------------------------------------------------------
 * *********************************************************************** */

static void Buffer_Ini(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	PtrTxHd = 0;
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <Buffer_Ini+0x24>)
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
	PtrTxTl = 0;
 800039e:	4b07      	ldr	r3, [pc, #28]	; (80003bc <Buffer_Ini+0x28>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
	PtrRxHd = 0;
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <Buffer_Ini+0x2c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
	PtrRxTl = 0;
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <Buffer_Ini+0x30>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
}
 80003b0:	46c0      	nop			; (mov r8, r8)
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	20000024 	.word	0x20000024
 80003bc:	20000028 	.word	0x20000028
 80003c0:	2000012c 	.word	0x2000012c
 80003c4:	20000130 	.word	0x20000130

080003c8 <Buffer_Tx_Set>:
 * AÑADIR UN CARÁCTER AL BUFFER DE TRANSMISIÓN
 * --------------------------------------------------------------------------
 ************************************************************************* */

static uint32_t Buffer_Tx_Set(unsigned char ch)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	0002      	movs	r2, r0
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	701a      	strb	r2, [r3, #0]
  if(((PtrTxHd+1) & MASK) == PtrTxTl)
 80003d4:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <Buffer_Tx_Set+0x48>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3301      	adds	r3, #1
 80003da:	22ff      	movs	r2, #255	; 0xff
 80003dc:	401a      	ands	r2, r3
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <Buffer_Tx_Set+0x4c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d102      	bne.n	80003ec <Buffer_Tx_Set+0x24>
  {
    return(0xFFFFFFFF);                 /* Error */
 80003e6:	2301      	movs	r3, #1
 80003e8:	425b      	negs	r3, r3
 80003ea:	e00d      	b.n	8000408 <Buffer_Tx_Set+0x40>
  }
  else
  {
    BufferTxc[PtrTxHd] = ch;
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <Buffer_Tx_Set+0x48>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a09      	ldr	r2, [pc, #36]	; (8000418 <Buffer_Tx_Set+0x50>)
 80003f2:	1df9      	adds	r1, r7, #7
 80003f4:	7809      	ldrb	r1, [r1, #0]
 80003f6:	54d1      	strb	r1, [r2, r3]
    PtrTxHd = (PtrTxHd + 1)& MASK;
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <Buffer_Tx_Set+0x48>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3301      	adds	r3, #1
 80003fe:	22ff      	movs	r2, #255	; 0xff
 8000400:	401a      	ands	r2, r3
 8000402:	4b03      	ldr	r3, [pc, #12]	; (8000410 <Buffer_Tx_Set+0x48>)
 8000404:	601a      	str	r2, [r3, #0]
    return(0);
 8000406:	2300      	movs	r3, #0
  }
}
 8000408:	0018      	movs	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	b002      	add	sp, #8
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000024 	.word	0x20000024
 8000414:	20000028 	.word	0x20000028
 8000418:	2000002c 	.word	0x2000002c

0800041c <Buffer_Tx_Get>:
 * RECOGER UN CARÁCTER DEL BUFFER DE TRANSMISIÓN
 * --------------------------------------------------------------------------
 ************************************************************************* */

static uint32_t Buffer_Tx_Get(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
  uint32_t ch;

  if(PtrTxTl == PtrTxHd)
 8000422:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <Buffer_Tx_Get+0x3c>)
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	4b0d      	ldr	r3, [pc, #52]	; (800045c <Buffer_Tx_Get+0x40>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	429a      	cmp	r2, r3
 800042c:	d102      	bne.n	8000434 <Buffer_Tx_Get+0x18>
  {
    return(0xFFFFFFFF);
 800042e:	2301      	movs	r3, #1
 8000430:	425b      	negs	r3, r3
 8000432:	e00c      	b.n	800044e <Buffer_Tx_Get+0x32>
  }
  else
  {
    ch = BufferTxc[PtrTxTl];
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <Buffer_Tx_Get+0x3c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a09      	ldr	r2, [pc, #36]	; (8000460 <Buffer_Tx_Get+0x44>)
 800043a:	5cd3      	ldrb	r3, [r2, r3]
 800043c:	607b      	str	r3, [r7, #4]
    PtrTxTl = ((PtrTxTl + 1) & MASK);
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <Buffer_Tx_Get+0x3c>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	3301      	adds	r3, #1
 8000444:	22ff      	movs	r2, #255	; 0xff
 8000446:	401a      	ands	r2, r3
 8000448:	4b03      	ldr	r3, [pc, #12]	; (8000458 <Buffer_Tx_Get+0x3c>)
 800044a:	601a      	str	r2, [r3, #0]
    return(ch);
 800044c:	687b      	ldr	r3, [r7, #4]
  }
}
 800044e:	0018      	movs	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	b002      	add	sp, #8
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	20000028 	.word	0x20000028
 800045c:	20000024 	.word	0x20000024
 8000460:	2000002c 	.word	0x2000002c

08000464 <Buffer_Rx_Set>:
 * AÑADIR UN CARÁCTER AL BUFFER DE RECEPCIÓN
 * --------------------------------------------------------------------------
 ************************************************************************* */

static uint32_t Buffer_Rx_Set(unsigned char ch)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	0002      	movs	r2, r0
 800046c:	1dfb      	adds	r3, r7, #7
 800046e:	701a      	strb	r2, [r3, #0]
  if(((PtrRxHd+1) & MASK) == PtrRxTl)
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <Buffer_Rx_Set+0x48>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	22ff      	movs	r2, #255	; 0xff
 8000478:	401a      	ands	r2, r3
 800047a:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <Buffer_Rx_Set+0x4c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	429a      	cmp	r2, r3
 8000480:	d102      	bne.n	8000488 <Buffer_Rx_Set+0x24>
  {
    return(0xFFFFFFFF);                 /* Error */
 8000482:	2301      	movs	r3, #1
 8000484:	425b      	negs	r3, r3
 8000486:	e00d      	b.n	80004a4 <Buffer_Rx_Set+0x40>
  }
  else
  {
    BufferRxc[PtrRxHd] = ch;
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <Buffer_Rx_Set+0x48>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a09      	ldr	r2, [pc, #36]	; (80004b4 <Buffer_Rx_Set+0x50>)
 800048e:	1df9      	adds	r1, r7, #7
 8000490:	7809      	ldrb	r1, [r1, #0]
 8000492:	54d1      	strb	r1, [r2, r3]
    PtrRxHd = (PtrRxHd + 1)& MASK;
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <Buffer_Rx_Set+0x48>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	3301      	adds	r3, #1
 800049a:	22ff      	movs	r2, #255	; 0xff
 800049c:	401a      	ands	r2, r3
 800049e:	4b03      	ldr	r3, [pc, #12]	; (80004ac <Buffer_Rx_Set+0x48>)
 80004a0:	601a      	str	r2, [r3, #0]
    return(0);
 80004a2:	2300      	movs	r3, #0
  }
}
 80004a4:	0018      	movs	r0, r3
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b002      	add	sp, #8
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	2000012c 	.word	0x2000012c
 80004b0:	20000130 	.word	0x20000130
 80004b4:	20000134 	.word	0x20000134

080004b8 <SERIE_Ini>:
 * INICIALIZCIÓN DEL CANAL SERIE
 * --------------------------------------------------------------------------
 * ************************************************************************ */

uint32_t SERIE_Ini(uint32_t prmi)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]

/* --- I/O --------------------------------------------------------------- */

  *GPIOA_OSPEEDR &= ~0xC0000030;        /* PA2, PA15 Velocidad baja */
 80004c0:	4b49      	ldr	r3, [pc, #292]	; (80005e8 <SERIE_Ini+0x130>)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	4b48      	ldr	r3, [pc, #288]	; (80005e8 <SERIE_Ini+0x130>)
 80004c6:	4949      	ldr	r1, [pc, #292]	; (80005ec <SERIE_Ini+0x134>)
 80004c8:	400a      	ands	r2, r1
 80004ca:	601a      	str	r2, [r3, #0]
  *GPIOA_PUPDR   &= ~0xC0000030;        /* Borra PA2, PA15  */
 80004cc:	4b48      	ldr	r3, [pc, #288]	; (80005f0 <SERIE_Ini+0x138>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b47      	ldr	r3, [pc, #284]	; (80005f0 <SERIE_Ini+0x138>)
 80004d2:	4946      	ldr	r1, [pc, #280]	; (80005ec <SERIE_Ini+0x134>)
 80004d4:	400a      	ands	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
  *GPIOA_OTYPER  &= ~0x00000030;        /* Borra modo PA2..PA15 Push-Pull */
 80004d8:	4b46      	ldr	r3, [pc, #280]	; (80005f4 <SERIE_Ini+0x13c>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	4b45      	ldr	r3, [pc, #276]	; (80005f4 <SERIE_Ini+0x13c>)
 80004de:	2130      	movs	r1, #48	; 0x30
 80004e0:	438a      	bics	r2, r1
 80004e2:	601a      	str	r2, [r3, #0]

  *GPIOA_MODER &= ~0xC0000030;          /* PA2..PA15 como ... */
 80004e4:	2390      	movs	r3, #144	; 0x90
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	2390      	movs	r3, #144	; 0x90
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	493f      	ldr	r1, [pc, #252]	; (80005ec <SERIE_Ini+0x134>)
 80004f0:	400a      	ands	r2, r1
 80004f2:	601a      	str	r2, [r3, #0]
  *GPIOA_MODER |=  0x80000020;          /* ... alternate */
 80004f4:	2390      	movs	r3, #144	; 0x90
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	2390      	movs	r3, #144	; 0x90
 80004fc:	05db      	lsls	r3, r3, #23
 80004fe:	493e      	ldr	r1, [pc, #248]	; (80005f8 <SERIE_Ini+0x140>)
 8000500:	430a      	orrs	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
  *GPIOA_AFRL &=  ~0x00000F00;          /* PA2 como ... */
 8000504:	4b3d      	ldr	r3, [pc, #244]	; (80005fc <SERIE_Ini+0x144>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b3c      	ldr	r3, [pc, #240]	; (80005fc <SERIE_Ini+0x144>)
 800050a:	493d      	ldr	r1, [pc, #244]	; (8000600 <SERIE_Ini+0x148>)
 800050c:	400a      	ands	r2, r1
 800050e:	601a      	str	r2, [r3, #0]
  *GPIOA_AFRL |=   0x00000100;          /* ... alternate 1 (USART2_TX) */
 8000510:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <SERIE_Ini+0x144>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b39      	ldr	r3, [pc, #228]	; (80005fc <SERIE_Ini+0x144>)
 8000516:	2180      	movs	r1, #128	; 0x80
 8000518:	0049      	lsls	r1, r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	601a      	str	r2, [r3, #0]
  *GPIOA_AFRH &=  ~0xF0000000;          /* PA15 como ... */
 800051e:	4b39      	ldr	r3, [pc, #228]	; (8000604 <SERIE_Ini+0x14c>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	4b38      	ldr	r3, [pc, #224]	; (8000604 <SERIE_Ini+0x14c>)
 8000524:	0112      	lsls	r2, r2, #4
 8000526:	0912      	lsrs	r2, r2, #4
 8000528:	601a      	str	r2, [r3, #0]
  *GPIOA_AFRH |=   0x10000000;          /* ... alternate 1 (USART2_RX) */
 800052a:	4b36      	ldr	r3, [pc, #216]	; (8000604 <SERIE_Ini+0x14c>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	4b35      	ldr	r3, [pc, #212]	; (8000604 <SERIE_Ini+0x14c>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	0549      	lsls	r1, r1, #21
 8000534:	430a      	orrs	r2, r1
 8000536:	601a      	str	r2, [r3, #0]

/* --- CLOCK ENABLE ------------------------------------------------------ */

  *RCC_APB1ENR |= 0x00020000;            /* Enable USART 2 Clock */
 8000538:	4b33      	ldr	r3, [pc, #204]	; (8000608 <SERIE_Ini+0x150>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b32      	ldr	r3, [pc, #200]	; (8000608 <SERIE_Ini+0x150>)
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	0289      	lsls	r1, r1, #10
 8000542:	430a      	orrs	r2, r1
 8000544:	601a      	str	r2, [r3, #0]

/* --- USART 2 ----------------------------------------------------------- */

  *USART2_BRR = RELOJ_GetFreq() / DEFSPEED;  /* Speed. when disabled*/
 8000546:	f7ff ff1d 	bl	8000384 <RELOJ_GetFreq>
 800054a:	0002      	movs	r2, r0
 800054c:	4c2f      	ldr	r4, [pc, #188]	; (800060c <SERIE_Ini+0x154>)
 800054e:	23e1      	movs	r3, #225	; 0xe1
 8000550:	0259      	lsls	r1, r3, #9
 8000552:	0010      	movs	r0, r2
 8000554:	f7ff fdd8 	bl	8000108 <__udivsi3>
 8000558:	0003      	movs	r3, r0
 800055a:	6023      	str	r3, [r4, #0]

  *USART2_CR1  =  0x00840000;     /* Pre & post times. Over 16, 8 bits no par no stop */
 800055c:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <SERIE_Ini+0x158>)
 800055e:	2284      	movs	r2, #132	; 0x84
 8000560:	0412      	lsls	r2, r2, #16
 8000562:	601a      	str	r2, [r3, #0]
  *USART2_CR1 |= 0x0000000C;     /* Enable RX and TX */
 8000564:	4b2a      	ldr	r3, [pc, #168]	; (8000610 <SERIE_Ini+0x158>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <SERIE_Ini+0x158>)
 800056a:	210c      	movs	r1, #12
 800056c:	430a      	orrs	r2, r1
 800056e:	601a      	str	r2, [r3, #0]
  *USART2_CR2 = 0;           /* NO swappins, levelinvert, 1 stop, no clock */
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SERIE_Ini+0x15c>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
                              /* NO LIN,... */
  *USART2_CR3 = 0;              /* NO CTS, RTS, Smartcard, driver, IrDA... */
 8000576:	4b28      	ldr	r3, [pc, #160]	; (8000618 <SERIE_Ini+0x160>)
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]

  *USART2_GTPR = 0;             /*IrDA, Smartcard !!!! */
 800057c:	4b27      	ldr	r3, [pc, #156]	; (800061c <SERIE_Ini+0x164>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
  *USART2_RTOR = 0;           /* Timeots ... !!!!! */
 8000582:	4b27      	ldr	r3, [pc, #156]	; (8000620 <SERIE_Ini+0x168>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
  *USART2_RQR = 0;              /* NOne request !!!!!! */
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <SERIE_Ini+0x16c>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]

  *USART2_CR1 |= 0x0000000C;     /* Enable TX & RX */
 800058e:	4b20      	ldr	r3, [pc, #128]	; (8000610 <SERIE_Ini+0x158>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <SERIE_Ini+0x158>)
 8000594:	210c      	movs	r1, #12
 8000596:	430a      	orrs	r2, r1
 8000598:	601a      	str	r2, [r3, #0]
  *USART2_CR1 |= 0x00000001;     /* Enable USART */
 800059a:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <SERIE_Ini+0x158>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <SERIE_Ini+0x158>)
 80005a0:	2101      	movs	r1, #1
 80005a2:	430a      	orrs	r2, r1
 80005a4:	601a      	str	r2, [r3, #0]

/* --- INTERRUPCIÓN PROPIA ----------------------------------------------- */

  *NVIC_ISER |=  0x10000000;	/* INT 28 para USART_2 */
 80005a6:	4b20      	ldr	r3, [pc, #128]	; (8000628 <SERIE_Ini+0x170>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <SERIE_Ini+0x170>)
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	0549      	lsls	r1, r1, #21
 80005b0:	430a      	orrs	r2, r1
 80005b2:	601a      	str	r2, [r3, #0]
  *NVIC_IPR7  &= ~0x000000FF;	/* Clear bits... */
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <SERIE_Ini+0x174>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <SERIE_Ini+0x174>)
 80005ba:	21ff      	movs	r1, #255	; 0xff
 80005bc:	438a      	bics	r2, r1
 80005be:	601a      	str	r2, [r3, #0]
  *NVIC_IPR7  |=  0x00000000;	/* Priority 0 ??? */
 80005c0:	4a1a      	ldr	r2, [pc, #104]	; (800062c <SERIE_Ini+0x174>)
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <SERIE_Ini+0x174>)
 80005c4:	6812      	ldr	r2, [r2, #0]
 80005c6:	601a      	str	r2, [r3, #0]

  *USART2_CR1 |= 0x00000020;    /* RX interrupt enable */
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <SERIE_Ini+0x158>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <SERIE_Ini+0x158>)
 80005ce:	2120      	movs	r1, #32
 80005d0:	430a      	orrs	r2, r1
 80005d2:	601a      	str	r2, [r3, #0]
//  *USART2_CR1 |= 0x00000080;    /* TX interrupt enable */

/* --- VARIABLES --------------------------------------------------------- */

  Buffer_Ini();		/* Sun módulo del buffer */
 80005d4:	f7ff fede 	bl	8000394 <Buffer_Ini>

  errors = 0;
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <SERIE_Ini+0x178>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]

/* --- FINAL DE INICIALIZACIONES ---------------------------------------- */

  return(0);
 80005de:	2300      	movs	r3, #0

}
 80005e0:	0018      	movs	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b003      	add	sp, #12
 80005e6:	bd90      	pop	{r4, r7, pc}
 80005e8:	48000008 	.word	0x48000008
 80005ec:	3fffffcf 	.word	0x3fffffcf
 80005f0:	4800000c 	.word	0x4800000c
 80005f4:	48000004 	.word	0x48000004
 80005f8:	80000020 	.word	0x80000020
 80005fc:	48000020 	.word	0x48000020
 8000600:	fffff0ff 	.word	0xfffff0ff
 8000604:	48000024 	.word	0x48000024
 8000608:	4002101c 	.word	0x4002101c
 800060c:	4000440c 	.word	0x4000440c
 8000610:	40004400 	.word	0x40004400
 8000614:	40004404 	.word	0x40004404
 8000618:	40004408 	.word	0x40004408
 800061c:	40004410 	.word	0x40004410
 8000620:	40004414 	.word	0x40004414
 8000624:	40004418 	.word	0x40004418
 8000628:	e000e100 	.word	0xe000e100
 800062c:	e000e41c 	.word	0xe000e41c
 8000630:	20000020 	.word	0x20000020

08000634 <SERIE_Per>:
** PERIÓDICA
** --------------------------------------------------------------------------
************************************************************************** */

void SERIE_Per()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <USART2_IRQHandler>:
** INTERRUPCIÓN PROPIA
** --------------------------------------------------------------------------
************************************************************************** */

void USART2_IRQHandler()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  uint32_t chh;

  /* --- TEST ORIGIN: ¿RX FULL? ------------------------------------------ */

  if(*USART2_ISR & 0x00000020)
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <USART2_IRQHandler+0x74>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2220      	movs	r2, #32
 800064c:	4013      	ands	r3, r2
 800064e:	d00e      	beq.n	800066e <USART2_IRQHandler+0x2e>
  {
    if((Buffer_Rx_Set(*USART2_RDR)) > 0x000000FF) /* Read, clear & ->buffer */
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <USART2_IRQHandler+0x78>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	0018      	movs	r0, r3
 8000658:	f7ff ff04 	bl	8000464 <Buffer_Rx_Set>
 800065c:	0003      	movs	r3, r0
 800065e:	2bff      	cmp	r3, #255	; 0xff
 8000660:	d905      	bls.n	800066e <USART2_IRQHandler+0x2e>
    {
      errors |= 0x00000001;    /* Error de buffer saturado */
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <USART2_IRQHandler+0x7c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2201      	movs	r2, #1
 8000668:	431a      	orrs	r2, r3
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <USART2_IRQHandler+0x7c>)
 800066c:	601a      	str	r2, [r3, #0]
//    timeout = TIMEOUT;        /* Repone timeout */
  }

  /* --- TEST ORIGIN: ¿TX VOID? ------------------------------------------ */

  if(*USART2_ISR & 0x00000080 & *USART2_CR1)
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <USART2_IRQHandler+0x74>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <USART2_IRQHandler+0x80>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4013      	ands	r3, r2
 8000678:	2280      	movs	r2, #128	; 0x80
 800067a:	4013      	ands	r3, r2
 800067c:	d010      	beq.n	80006a0 <USART2_IRQHandler+0x60>
  {
    if((chh=Buffer_Tx_Get()) < 0x00000100)
 800067e:	f7ff fecd 	bl	800041c <Buffer_Tx_Get>
 8000682:	0003      	movs	r3, r0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2bff      	cmp	r3, #255	; 0xff
 800068a:	d803      	bhi.n	8000694 <USART2_IRQHandler+0x54>
    {
      *USART2_TDR = chh;                /* Send and clear int flag */
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <USART2_IRQHandler+0x84>)
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	e005      	b.n	80006a0 <USART2_IRQHandler+0x60>
    }
    else
    {
      *USART2_CR1 &= ~0x00000080;       /* Disable interrupt TX */
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <USART2_IRQHandler+0x80>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <USART2_IRQHandler+0x80>)
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	438a      	bics	r2, r1
 800069e:	601a      	str	r2, [r3, #0]
    }
  }

  /* --- TEST ORIGIN: ¿OTHER? ------------------------------------------- */

    *USART2_ICR |=0x0000000F; /* Clrear other possible flags */
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <USART2_IRQHandler+0x88>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <USART2_IRQHandler+0x88>)
 80006a6:	210f      	movs	r1, #15
 80006a8:	430a      	orrs	r2, r1
 80006aa:	601a      	str	r2, [r3, #0]

}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b002      	add	sp, #8
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	4000441c 	.word	0x4000441c
 80006b8:	40004424 	.word	0x40004424
 80006bc:	20000020 	.word	0x20000020
 80006c0:	40004400 	.word	0x40004400
 80006c4:	40004428 	.word	0x40004428
 80006c8:	40004420 	.word	0x40004420

080006cc <SERIE_TxChar>:
** ENVIAR UN CARÁCTER
** --------------------------------------------------------------------------
************************************************************************** */

uint32_t SERIE_TxChar(uint32_t ch)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if((Buffer_Tx_Set(ch)) == 0xFFFFFFFF)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff fe75 	bl	80003c8 <Buffer_Tx_Set>
 80006de:	0003      	movs	r3, r0
 80006e0:	3301      	adds	r3, #1
 80006e2:	d102      	bne.n	80006ea <SERIE_TxChar+0x1e>
  {
    return(0xFFFFFFFF);
 80006e4:	2301      	movs	r3, #1
 80006e6:	425b      	negs	r3, r3
 80006e8:	e006      	b.n	80006f8 <SERIE_TxChar+0x2c>
  }
  *USART2_CR1 |= 0x00000080;    /* Autoriza interrupción TX */
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <SERIE_TxChar+0x34>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <SERIE_TxChar+0x34>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	430a      	orrs	r2, r1
 80006f4:	601a      	str	r2, [r3, #0]
  return(ch);
 80006f6:	687b      	ldr	r3, [r7, #4]
}
 80006f8:	0018      	movs	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b002      	add	sp, #8
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40004400 	.word	0x40004400

08000704 <SWITCH_Ini>:
 *
 *
 */

uint32_t SWITCH_Ini(uint32_t prmi)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

	/* --- INICIALIZACIÓN DE HARDWARE ------------------------------------ */

	*GPIOB_PUPDR &= ~0x0000000F; 		/* PB0, PB1... */
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <SWITCH_Ini+0x54>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <SWITCH_Ini+0x54>)
 8000712:	210f      	movs	r1, #15
 8000714:	438a      	bics	r2, r1
 8000716:	601a      	str	r2, [r3, #0]
	*GPIOB_PUPDR |=  0x00000005;  		/* ... pull.up */
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <SWITCH_Ini+0x54>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <SWITCH_Ini+0x54>)
 800071e:	2105      	movs	r1, #5
 8000720:	430a      	orrs	r2, r1
 8000722:	601a      	str	r2, [r3, #0]

	*GPIOA_MODER &= ~0x0000000F;		/* PB0 y PB1... entradas */
 8000724:	2390      	movs	r3, #144	; 0x90
 8000726:	05db      	lsls	r3, r3, #23
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	2390      	movs	r3, #144	; 0x90
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	210f      	movs	r1, #15
 8000730:	438a      	bics	r2, r1
 8000732:	601a      	str	r2, [r3, #0]

	/* --- INICIALIZACIÓN DE VARIABLES ----------------------------------- */

    switch1Input = 0x00000000;			/* Inicialmente no pusada */
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <SWITCH_Ini+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
    switch2Input = 0x00000000;			/* Inicialmente no pusada */
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <SWITCH_Ini+0x5c>)
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]

    switch1Stat = 0x00000000;			/* Inicialmente no pusada */
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <SWITCH_Ini+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
    switch2Stat = 0x00000000;			/* Inicialmente no pusada */
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <SWITCH_Ini+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]

	/* --- FINAL DE INICIALIZACIONES ------------------------------------- */

	return(0);
 800074c:	2300      	movs	r3, #0
}
 800074e:	0018      	movs	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	b002      	add	sp, #8
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	4800040c 	.word	0x4800040c
 800075c:	20000234 	.word	0x20000234
 8000760:	20000238 	.word	0x20000238
 8000764:	2000023c 	.word	0x2000023c
 8000768:	20000240 	.word	0x20000240

0800076c <SWITCH_Per>:
 * \todo	DETECCIÓN DE FLANCOS DE ENTRADA Y DE SALIDA y AUTOREPETICIÓN
 *
 */

void SWITCH_Per()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	/* --- ACTUALIZAR LAS IMÁGENES MEMORIZADAS DE LA ENTRADA ------------- */

	switch1Input = switch1Input << 1;		/* Desplazar estado anterior */
 8000770:	4b49      	ldr	r3, [pc, #292]	; (8000898 <SWITCH_Per+0x12c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	005a      	lsls	r2, r3, #1
 8000776:	4b48      	ldr	r3, [pc, #288]	; (8000898 <SWITCH_Per+0x12c>)
 8000778:	601a      	str	r2, [r3, #0]
	if((*GPIOB_IDR & 0x00000001) == 0)		/* ¿Pulsador 1 pulsado? */
 800077a:	4b48      	ldr	r3, [pc, #288]	; (800089c <SWITCH_Per+0x130>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2201      	movs	r2, #1
 8000780:	4013      	ands	r3, r2
 8000782:	d104      	bne.n	800078e <SWITCH_Per+0x22>
	{
		switch1Input += 1;		/* Sí, nuevo bit es 1 */
 8000784:	4b44      	ldr	r3, [pc, #272]	; (8000898 <SWITCH_Per+0x12c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	4b43      	ldr	r3, [pc, #268]	; (8000898 <SWITCH_Per+0x12c>)
 800078c:	601a      	str	r2, [r3, #0]
	}

	switch2Input = switch2Input << 1;		/* Desplazar estado anterior */
 800078e:	4b44      	ldr	r3, [pc, #272]	; (80008a0 <SWITCH_Per+0x134>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	005a      	lsls	r2, r3, #1
 8000794:	4b42      	ldr	r3, [pc, #264]	; (80008a0 <SWITCH_Per+0x134>)
 8000796:	601a      	str	r2, [r3, #0]
	if((*GPIOB_IDR & 0x00000002) == 0)		/* ¿Pulsador 1 pulsado? */
 8000798:	4b40      	ldr	r3, [pc, #256]	; (800089c <SWITCH_Per+0x130>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2202      	movs	r2, #2
 800079e:	4013      	ands	r3, r2
 80007a0:	d104      	bne.n	80007ac <SWITCH_Per+0x40>
	{
		switch2Input += 1;		/* Sí, nuevo bit es 1 */
 80007a2:	4b3f      	ldr	r3, [pc, #252]	; (80008a0 <SWITCH_Per+0x134>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	4b3d      	ldr	r3, [pc, #244]	; (80008a0 <SWITCH_Per+0x134>)
 80007aa:	601a      	str	r2, [r3, #0]
	}

	/* --- ACTUALIZAR EL ESTADO (SWITCH 1 COMPLETO) ---------------------- */

	if( (switch1Input & MASK) == 0)
 80007ac:	4b3a      	ldr	r3, [pc, #232]	; (8000898 <SWITCH_Per+0x12c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	051b      	lsls	r3, r3, #20
 80007b2:	0d1b      	lsrs	r3, r3, #20
 80007b4:	d112      	bne.n	80007dc <SWITCH_Per+0x70>
	{
		if((switch1Stat & SWITCH_BIT_ACTUALSTAT) == 1)
 80007b6:	4b3b      	ldr	r3, [pc, #236]	; (80008a4 <SWITCH_Per+0x138>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2201      	movs	r2, #1
 80007bc:	4013      	ands	r3, r2
 80007be:	d005      	beq.n	80007cc <SWITCH_Per+0x60>
		{
			switch1Stat |= SWITCH_BIT_EDGEOFF;
 80007c0:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <SWITCH_Per+0x138>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2220      	movs	r2, #32
 80007c6:	431a      	orrs	r2, r3
 80007c8:	4b36      	ldr	r3, [pc, #216]	; (80008a4 <SWITCH_Per+0x138>)
 80007ca:	601a      	str	r2, [r3, #0]
		}
		switch1Stat &= ~SWITCH_BIT_ACTUALSTAT;
 80007cc:	4b35      	ldr	r3, [pc, #212]	; (80008a4 <SWITCH_Per+0x138>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2201      	movs	r2, #1
 80007d2:	4393      	bics	r3, r2
 80007d4:	001a      	movs	r2, r3
 80007d6:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <SWITCH_Per+0x138>)
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	e03f      	b.n	800085c <SWITCH_Per+0xf0>
	}
	else if( (switch1Input & MASK) == MASK)
 80007dc:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <SWITCH_Per+0x12c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	051b      	lsls	r3, r3, #20
 80007e2:	0d1b      	lsrs	r3, r3, #20
 80007e4:	4a30      	ldr	r2, [pc, #192]	; (80008a8 <SWITCH_Per+0x13c>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d138      	bne.n	800085c <SWITCH_Per+0xf0>
	{
		if((switch1Stat & SWITCH_BIT_ACTUALSTAT) == 0)
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <SWITCH_Per+0x138>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4013      	ands	r3, r2
 80007f2:	d108      	bne.n	8000806 <SWITCH_Per+0x9a>
		{
			switch1Stat |= SWITCH_BIT_EDGEON;
 80007f4:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <SWITCH_Per+0x138>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2210      	movs	r2, #16
 80007fa:	431a      	orrs	r2, r3
 80007fc:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <SWITCH_Per+0x138>)
 80007fe:	601a      	str	r2, [r3, #0]
			switch1Cuenta = 0;
 8000800:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <SWITCH_Per+0x140>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
		}
		++switch1Cuenta;
 8000806:	4b29      	ldr	r3, [pc, #164]	; (80008ac <SWITCH_Per+0x140>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	4b27      	ldr	r3, [pc, #156]	; (80008ac <SWITCH_Per+0x140>)
 800080e:	601a      	str	r2, [r3, #0]
		if(switch1Cuenta == TEMPOLONG)
 8000810:	4b26      	ldr	r3, [pc, #152]	; (80008ac <SWITCH_Per+0x140>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	23fa      	movs	r3, #250	; 0xfa
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	429a      	cmp	r2, r3
 800081a:	d105      	bne.n	8000828 <SWITCH_Per+0xbc>
		{
			switch1Stat |= SWITCH_BIT_FLAGLONGON;
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <SWITCH_Per+0x138>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2240      	movs	r2, #64	; 0x40
 8000822:	431a      	orrs	r2, r3
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <SWITCH_Per+0x138>)
 8000826:	601a      	str	r2, [r3, #0]
		}
		if(switch1Cuenta >= TEMPOAUTO)
 8000828:	4b20      	ldr	r3, [pc, #128]	; (80008ac <SWITCH_Per+0x140>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <SWITCH_Per+0x144>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d90e      	bls.n	8000850 <SWITCH_Per+0xe4>
		{
			if((switch1Cuenta % RITMOAUTO) == 0)
 8000832:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <SWITCH_Per+0x140>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	21c8      	movs	r1, #200	; 0xc8
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff fceb 	bl	8000214 <__aeabi_uidivmod>
 800083e:	1e0b      	subs	r3, r1, #0
 8000840:	d106      	bne.n	8000850 <SWITCH_Per+0xe4>
			{
				switch1Stat |= SWITCH_BIT_FLAGREPEAT;
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <SWITCH_Per+0x138>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	0052      	lsls	r2, r2, #1
 800084a:	431a      	orrs	r2, r3
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <SWITCH_Per+0x138>)
 800084e:	601a      	str	r2, [r3, #0]
			}
		}
		switch1Stat |= SWITCH_BIT_ACTUALSTAT;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <SWITCH_Per+0x138>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2201      	movs	r2, #1
 8000856:	431a      	orrs	r2, r3
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <SWITCH_Per+0x138>)
 800085a:	601a      	str	r2, [r3, #0]
	}

	/* --- ACTUALIZAR EL ESTADO (SWITCH 2 INCOMPLETO) -------------------- */

	if( (switch2Input & MASK) == 0)
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <SWITCH_Per+0x134>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	051b      	lsls	r3, r3, #20
 8000862:	0d1b      	lsrs	r3, r3, #20
 8000864:	d107      	bne.n	8000876 <SWITCH_Per+0x10a>
	{
		switch2Stat &= ~SWITCH_BIT_ACTUALSTAT;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <SWITCH_Per+0x148>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2201      	movs	r2, #1
 800086c:	4393      	bics	r3, r2
 800086e:	001a      	movs	r2, r3
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <SWITCH_Per+0x148>)
 8000872:	601a      	str	r2, [r3, #0]
	/* --- DETECCIÓN DE FLANCOS? AUTOREPETICIÓN? ------------------------- */

		// EN DESARROLLO !!!!!!!!!!!!!!!!!!!!!!!!

    /* --- FINAL DE LA RUTINA PERIÓDICA ---------------------------------- */
}
 8000874:	e00c      	b.n	8000890 <SWITCH_Per+0x124>
	else if( (switch2Input & MASK) == MASK)
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <SWITCH_Per+0x134>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	051b      	lsls	r3, r3, #20
 800087c:	0d1b      	lsrs	r3, r3, #20
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <SWITCH_Per+0x13c>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d105      	bne.n	8000890 <SWITCH_Per+0x124>
		switch2Stat |= SWITCH_BIT_ACTUALSTAT;
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <SWITCH_Per+0x148>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2201      	movs	r2, #1
 800088a:	431a      	orrs	r2, r3
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <SWITCH_Per+0x148>)
 800088e:	601a      	str	r2, [r3, #0]
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	20000234 	.word	0x20000234
 800089c:	48000410 	.word	0x48000410
 80008a0:	20000238 	.word	0x20000238
 80008a4:	2000023c 	.word	0x2000023c
 80008a8:	00000fff 	.word	0x00000fff
 80008ac:	20000244 	.word	0x20000244
 80008b0:	00000513 	.word	0x00000513
 80008b4:	20000240 	.word	0x20000240

080008b8 <SWITCH_GetSW1>:
 * \todo	Considear PROCESO, borrado de flags y condiciones de carrera
 *
 */

uint32_t SWITCH_GetSW1()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
	uint32_t inter = switch1Stat;
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <SWITCH_GetSW1+0x24>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	607b      	str	r3, [r7, #4]
	switch1Stat &= ~EDGEFLAGS;
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <SWITCH_GetSW1+0x24>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <SWITCH_GetSW1+0x28>)
 80008ca:	401a      	ands	r2, r3
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <SWITCH_GetSW1+0x24>)
 80008ce:	601a      	str	r2, [r3, #0]
    return(inter);
 80008d0:	687b      	ldr	r3, [r7, #4]
}
 80008d2:	0018      	movs	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	2000023c 	.word	0x2000023c
 80008e0:	fffffe8f 	.word	0xfffffe8f

080008e4 <SYSTEM_Ini>:
 * INICIALIZACIÓN DEL SISTEMA
 * --------------------------------------------------------------------------
 * *********************************************************************** */

uint32_t SYSTEM_Ini(uint32_t prmi)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

	/* --- INICIALIZACIÓN DE RELOJ --------------------------------------- */

	RELOJ_Ini(0);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff fd3f 	bl	8000370 <RELOJ_Ini>

	/* --- ACTIVAR TODOS LOS PUERTOS ------------------------------------- */

	*RCC_AHBENR |= 0x007E0000;  /* Activa reloj hacia los puertos E/S */
 80008f2:	4b23      	ldr	r3, [pc, #140]	; (8000980 <SYSTEM_Ini+0x9c>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <SYSTEM_Ini+0x9c>)
 80008f8:	21fc      	movs	r1, #252	; 0xfc
 80008fa:	03c9      	lsls	r1, r1, #15
 80008fc:	430a      	orrs	r2, r1
 80008fe:	601a      	str	r2, [r3, #0]

	/* --- INICIALIZACIONES: MÓDULOS ------------------------------------- */

	ANALOG_Ini(0);
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fc8d 	bl	8000220 <ANALOG_Ini>
	BUZZER_Ini(0);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff fc98 	bl	800023c <BUZZER_Ini>
	CAN_Ini(0);
 800090c:	2000      	movs	r0, #0
 800090e:	f7ff fca3 	bl	8000258 <CAN_Ini>
	I2CS_Ini(0);
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff fcb3 	bl	800027e <I2CS_Ini>
    LEDD_Ini(0);
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff fd1b 	bl	8000354 <LEDD_Ini>
    LED_Ini(0);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff fcc0 	bl	80002a4 <LED_Ini>
    SERIE_Ini(0);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fdc7 	bl	80004b8 <SERIE_Ini>
    SWITCH_Ini(0);
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff feea 	bl	8000704 <SWITCH_Ini>

    // Pendiente. Se hacen las pruebas sin ello

    /* ---- INICIALIZACIONES: TEMPORIZADOR DE SISTEMA -------------------- */

    *STK_RVR = (RELOJ_GetFreq()/RITHM) - 1;         /* Top value */
 8000930:	f7ff fd28 	bl	8000384 <RELOJ_GetFreq>
 8000934:	0002      	movs	r2, r0
 8000936:	23fa      	movs	r3, #250	; 0xfa
 8000938:	0099      	lsls	r1, r3, #2
 800093a:	0010      	movs	r0, r2
 800093c:	f7ff fbe4 	bl	8000108 <__udivsi3>
 8000940:	0003      	movs	r3, r0
 8000942:	001a      	movs	r2, r3
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <SYSTEM_Ini+0xa0>)
 8000946:	3a01      	subs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]

    *STK_CSR = 0x0005;              /* Enable & select processor clock */
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <SYSTEM_Ini+0xa4>)
 800094c:	2205      	movs	r2, #5
 800094e:	601a      	str	r2, [r3, #0]
    *STK_CSR |= 0x0002;            /* Enable interrupt request */
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <SYSTEM_Ini+0xa4>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <SYSTEM_Ini+0xa4>)
 8000956:	2102      	movs	r1, #2
 8000958:	430a      	orrs	r2, r1
 800095a:	601a      	str	r2, [r3, #0]

    *SHPR3 &= ~0x33000000;         /* Low priority (high value) */
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <SYSTEM_Ini+0xa8>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <SYSTEM_Ini+0xa8>)
 8000962:	490b      	ldr	r1, [pc, #44]	; (8000990 <SYSTEM_Ini+0xac>)
 8000964:	400a      	ands	r2, r1
 8000966:	601a      	str	r2, [r3, #0]
    *SHPR3 |=  0xCC000000;         /* Low priority (high value) */
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <SYSTEM_Ini+0xa8>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <SYSTEM_Ini+0xa8>)
 800096e:	21cc      	movs	r1, #204	; 0xcc
 8000970:	0609      	lsls	r1, r1, #24
 8000972:	430a      	orrs	r2, r1
 8000974:	601a      	str	r2, [r3, #0]

    //Algunos módulos pueden requierir un tiempo para estabilziarse

    /* --- FINAL DE INICIALIZACIONES ------------------------------------- */

    return(0);
 8000976:	2300      	movs	r3, #0

}
 8000978:	0018      	movs	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40021014 	.word	0x40021014
 8000984:	e000e014 	.word	0xe000e014
 8000988:	e000e010 	.word	0xe000e010
 800098c:	e000ed20 	.word	0xe000ed20
 8000990:	ccffffff 	.word	0xccffffff

08000994 <SysTick_Handler>:
 * ATENCIÓN A LA INTERRUPCIÓN DEL TEMPORIZADOR DE SISTEMA
 * --------------------------------------------------------------------------
 * *********************************************************************** */

void SysTick_Handler()
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

	/* --- ACTUALIZACIÓN DE LOS MÓDULOS @ 1kHz --------------------------- */

	ANALOG_Per();
 8000998:	f7ff fc4b 	bl	8000232 <ANALOG_Per>
	BUZZER_Per();
 800099c:	f7ff fc57 	bl	800024e <BUZZER_Per>
	CAN_Per();
 80009a0:	f7ff fc63 	bl	800026a <CAN_Per>
	I2CS_Per();
 80009a4:	f7ff fc74 	bl	8000290 <I2CS_Per>
	LEDD_Per();
 80009a8:	f7ff fcdd 	bl	8000366 <LEDD_Per>
	LED_Per();
 80009ac:	f7ff fca0 	bl	80002f0 <LED_Per>
	SERIE_Per();
 80009b0:	f7ff fe40 	bl	8000634 <SERIE_Per>
	SWITCH_Per();
 80009b4:	f7ff feda 	bl	800076c <SWITCH_Per>

	/* --- TEMPORIZADOR DE TIEMPO ACTIVO --------------------------------- */

	++tiempoon;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <SysTick_Handler+0x58>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <SysTick_Handler+0x58>)
 80009c0:	601a      	str	r2, [r3, #0]

	/* --- TEMPORIZADORES DE APLICACIÓN ---------------------------------- */

	if(tiempo1 != 0)
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <SysTick_Handler+0x5c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d004      	beq.n	80009d4 <SysTick_Handler+0x40>
	{
		--tiempo1;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <SysTick_Handler+0x5c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	1e5a      	subs	r2, r3, #1
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <SysTick_Handler+0x5c>)
 80009d2:	601a      	str	r2, [r3, #0]
	}
	if(tiempo2 != 0)
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <SysTick_Handler+0x60>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d004      	beq.n	80009e6 <SysTick_Handler+0x52>
	{
		--tiempo2;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <SysTick_Handler+0x60>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	1e5a      	subs	r2, r3, #1
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <SysTick_Handler+0x60>)
 80009e4:	601a      	str	r2, [r3, #0]
	}

	/* --- FINAL DE LA INTERRUPCIÓN -------------------------------------- */

}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000248 	.word	0x20000248
 80009f0:	2000024c 	.word	0x2000024c
 80009f4:	20000250 	.word	0x20000250

080009f8 <Test_SWSER>:
 * TEST DE PULSADORES CON FLANCO LARGO Y AUTOREPETICIÓN
 * --------------------------------------------------------------------------
 * *********************************************************************** */

static void Test_SWSER(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0

	for(;;)
	{

		uint32_t stat1 = SWITCH_GetSW1();
 80009fe:	f7ff ff5b 	bl	80008b8 <SWITCH_GetSW1>
 8000a02:	0003      	movs	r3, r0
 8000a04:	607b      	str	r3, [r7, #4]

		if(stat1 & SWITCH_BIT_EDGEON)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2210      	movs	r2, #16
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	d002      	beq.n	8000a14 <Test_SWSER+0x1c>
		{
			SERIE_TxChar('1');
 8000a0e:	2031      	movs	r0, #49	; 0x31
 8000a10:	f7ff fe5c 	bl	80006cc <SERIE_TxChar>
		}
		if(stat1 & SWITCH_BIT_EDGEOFF)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2220      	movs	r2, #32
 8000a18:	4013      	ands	r3, r2
 8000a1a:	d002      	beq.n	8000a22 <Test_SWSER+0x2a>
		{
			SERIE_TxChar('0');
 8000a1c:	2030      	movs	r0, #48	; 0x30
 8000a1e:	f7ff fe55 	bl	80006cc <SERIE_TxChar>
		}
		if(stat1 & SWITCH_BIT_FLAGLONGON)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2240      	movs	r2, #64	; 0x40
 8000a26:	4013      	ands	r3, r2
 8000a28:	d002      	beq.n	8000a30 <Test_SWSER+0x38>
		{
			SERIE_TxChar('L');
 8000a2a:	204c      	movs	r0, #76	; 0x4c
 8000a2c:	f7ff fe4e 	bl	80006cc <SERIE_TxChar>
		}
		if(stat1 & SWITCH_BIT_FLAGREPEAT)
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4013      	ands	r3, r2
 8000a38:	d0e1      	beq.n	80009fe <Test_SWSER+0x6>
		{
			SERIE_TxChar('r');
 8000a3a:	2072      	movs	r0, #114	; 0x72
 8000a3c:	f7ff fe46 	bl	80006cc <SERIE_TxChar>
	{
 8000a40:	e7dd      	b.n	80009fe <Test_SWSER+0x6>

08000a42 <main>:
 * APLICACIÓN PRINCIPAL
 * --------------------------------------------------------------------------
 ************************************************************************* */

int main(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0

    /* --- INICIALIZACIONES. SISTEMA ------------------------------------- */

	SYSTEM_Ini(0);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff ff4c 	bl	80008e4 <SYSTEM_Ini>
	/* --- TESTS PARA PRUEBAS -------------------------------------------- */

	for(;;)
	{
//		Test_SWLED();
		Test_SWSER();
 8000a4c:	f7ff ffd4 	bl	80009f8 <Test_SWSER>
 8000a50:	e7fc      	b.n	8000a4c <main+0xa>
	...

08000a54 <Reset_Handler>:
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <LoopForever+0x2>)
 8000a56:	4685      	mov	sp, r0
 8000a58:	e000      	b.n	8000a5c <Reset_Handler+0x8>
 8000a5a:	bf00      	nop
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <LoopForever+0x6>)
 8000a5e:	490d      	ldr	r1, [pc, #52]	; (8000a94 <LoopForever+0xa>)
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <LoopForever+0xe>)
 8000a62:	2300      	movs	r3, #0
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:
 8000a66:	58d4      	ldr	r4, [r2, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:
 8000a6c:	18c4      	adds	r4, r0, r3
 8000a6e:	428c      	cmp	r4, r1
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <LoopForever+0x12>)
 8000a74:	4c0a      	ldr	r4, [pc, #40]	; (8000aa0 <LoopForever+0x16>)
 8000a76:	2300      	movs	r3, #0
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:
 8000a7e:	42a2      	cmp	r2, r4
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>
 8000a82:	f000 f811 	bl	8000aa8 <__libc_init_array>
 8000a86:	f7ff ffdc 	bl	8000a42 <main>

08000a8a <LoopForever>:
 8000a8a:	e7fe      	b.n	8000a8a <LoopForever>
 8000a8c:	20001800 	.word	0x20001800
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000000 	.word	0x20000000
 8000a98:	08000b10 	.word	0x08000b10
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000258 	.word	0x20000258

08000aa4 <ADC_COMP_IRQHandler>:
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_COMP_IRQHandler>
	...

08000aa8 <__libc_init_array>:
 8000aa8:	b570      	push	{r4, r5, r6, lr}
 8000aaa:	2600      	movs	r6, #0
 8000aac:	4d0c      	ldr	r5, [pc, #48]	; (8000ae0 <__libc_init_array+0x38>)
 8000aae:	4c0d      	ldr	r4, [pc, #52]	; (8000ae4 <__libc_init_array+0x3c>)
 8000ab0:	1b64      	subs	r4, r4, r5
 8000ab2:	10a4      	asrs	r4, r4, #2
 8000ab4:	42a6      	cmp	r6, r4
 8000ab6:	d109      	bne.n	8000acc <__libc_init_array+0x24>
 8000ab8:	2600      	movs	r6, #0
 8000aba:	f000 f819 	bl	8000af0 <_init>
 8000abe:	4d0a      	ldr	r5, [pc, #40]	; (8000ae8 <__libc_init_array+0x40>)
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	; (8000aec <__libc_init_array+0x44>)
 8000ac2:	1b64      	subs	r4, r4, r5
 8000ac4:	10a4      	asrs	r4, r4, #2
 8000ac6:	42a6      	cmp	r6, r4
 8000ac8:	d105      	bne.n	8000ad6 <__libc_init_array+0x2e>
 8000aca:	bd70      	pop	{r4, r5, r6, pc}
 8000acc:	00b3      	lsls	r3, r6, #2
 8000ace:	58eb      	ldr	r3, [r5, r3]
 8000ad0:	4798      	blx	r3
 8000ad2:	3601      	adds	r6, #1
 8000ad4:	e7ee      	b.n	8000ab4 <__libc_init_array+0xc>
 8000ad6:	00b3      	lsls	r3, r6, #2
 8000ad8:	58eb      	ldr	r3, [r5, r3]
 8000ada:	4798      	blx	r3
 8000adc:	3601      	adds	r6, #1
 8000ade:	e7f2      	b.n	8000ac6 <__libc_init_array+0x1e>
 8000ae0:	08000b08 	.word	0x08000b08
 8000ae4:	08000b08 	.word	0x08000b08
 8000ae8:	08000b08 	.word	0x08000b08
 8000aec:	08000b0c 	.word	0x08000b0c

08000af0 <_init>:
 8000af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000af6:	bc08      	pop	{r3}
 8000af8:	469e      	mov	lr, r3
 8000afa:	4770      	bx	lr

08000afc <_fini>:
 8000afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b02:	bc08      	pop	{r3}
 8000b04:	469e      	mov	lr, r3
 8000b06:	4770      	bx	lr
