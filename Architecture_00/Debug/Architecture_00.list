
Architecture_00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000490  08000498  00010498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000490  08000490  00010498  2**0
                  CONTENTS
  4 .ARM          00000000  08000490  08000490  00010498  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000490  08000498  00010498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000490  08000490  00010490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000494  08000494  00010494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000498  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000498  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010498  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000707  00000000  00000000  000104c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000037c  00000000  00000000  00010bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00010f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000148  00000000  00000000  00011138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002489  00000000  00000000  00011280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002a4a  00000000  00000000  00013709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ab2a  00000000  00000000  00016153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00020c7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003ec  00000000  00000000  00020cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000478 	.word	0x08000478

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000478 	.word	0x08000478

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/* ****************************************************************************
 * APLICACIÓN
 *************************************************************************** */

int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	SYSTEM_Ini();		// HW Init
 8000224:	f000 f8b4 	bl	8000390 <SYSTEM_Ini>

	LED_Set(0xFF000055);		/* Estado del LED */
 8000228:	4b02      	ldr	r3, [pc, #8]	; (8000234 <main+0x14>)
 800022a:	0018      	movs	r0, r3
 800022c:	f000 f85e 	bl	80002ec <LED_Set>

    /* Loop forever */
	while(1){
 8000230:	e7fe      	b.n	8000230 <main+0x10>
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	ff000055 	.word	0xff000055

08000238 <ANALOG_Ini>:

/* ****************************************************************************
 * INICIALIZACIONES HARDWARE
 * ************************************************************************* */

void ANALOG_Ini(){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0

}
 800023c:	46c0      	nop			; (mov r8, r8)
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <BUZZ_Ini>:

/* ****************************************************************************
 * INICIALIZACIONES HARDWARE
 * ************************************************************************* */

void BUZZ_Ini(){
 8000242:	b580      	push	{r7, lr}
 8000244:	af00      	add	r7, sp, #0

}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}

0800024c <CAN_Ini>:

/* ****************************************************************************
 * INICIALIZACIONES HARDWARE
 * ************************************************************************* */

void CAN_Ini(){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

}
 8000250:	46c0      	nop			; (mov r8, r8)
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}

08000256 <I2C_Ini>:

/* ****************************************************************************
 * INICIALIZACIONES HARDWARE
 * ************************************************************************* */

void I2C_Ini(){
 8000256:	b580      	push	{r7, lr}
 8000258:	af00      	add	r7, sp, #0

}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <LED_Ini>:

/* ****************************************************************************
 * INICIALIZACIONES HARDWARE
 * ************************************************************************* */

void LED_Ini(){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0

    *GPIOB_MODER &= ~0x000000C0;	/* PB3 como ... */
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <LED_Ini+0x24>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <LED_Ini+0x24>)
 800026a:	21c0      	movs	r1, #192	; 0xc0
 800026c:	438a      	bics	r2, r1
 800026e:	601a      	str	r2, [r3, #0]
    *GPIOB_MODER |=  0x00000040;	/* ... salida */
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <LED_Ini+0x24>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <LED_Ini+0x24>)
 8000276:	2140      	movs	r1, #64	; 0x40
 8000278:	430a      	orrs	r2, r1
 800027a:	601a      	str	r2, [r3, #0]

}
 800027c:	46c0      	nop			; (mov r8, r8)
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	48000400 	.word	0x48000400

08000288 <SysTick_Handler>:

void SysTick_Handler()
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
static uint32_t phase;
    /* --- EXTRACCIÓN DE MÁSCARA ----------------------------------------- */
    uint32_t mask = 1 << ((phase/125) % 32);
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <SysTick_Handler+0x58>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	217d      	movs	r1, #125	; 0x7d
 8000294:	0018      	movs	r0, r3
 8000296:	f7ff ff37 	bl	8000108 <__udivsi3>
 800029a:	0003      	movs	r3, r0
 800029c:	001a      	movs	r2, r3
 800029e:	231f      	movs	r3, #31
 80002a0:	4013      	ands	r3, r2
 80002a2:	2201      	movs	r2, #1
 80002a4:	409a      	lsls	r2, r3
 80002a6:	0013      	movs	r3, r2
 80002a8:	607b      	str	r3, [r7, #4]

    /* --- APLICACIÓN DEL ESTADO ACTUAL AL LED --------------------------- */

    if ((mask & ImageLED) == 0)
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <SysTick_Handler+0x5c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	4013      	ands	r3, r2
 80002b2:	d106      	bne.n	80002c2 <SysTick_Handler+0x3a>
    {
		*GPIOB_ODR &= ~0x00000008;		/* PB3 a nivel bajo */
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <SysTick_Handler+0x60>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <SysTick_Handler+0x60>)
 80002ba:	2108      	movs	r1, #8
 80002bc:	438a      	bics	r2, r1
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	e005      	b.n	80002ce <SysTick_Handler+0x46>
    }
    else
    {
		*GPIOB_ODR |= 0x00000008;		/* PB3 a nivel bajo */
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <SysTick_Handler+0x60>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <SysTick_Handler+0x60>)
 80002c8:	2108      	movs	r1, #8
 80002ca:	430a      	orrs	r2, r1
 80002cc:	601a      	str	r2, [r3, #0]
    }
    /* --- INCREMENTO DE FASE -------------------------------------------- */
    ++phase;
 80002ce:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <SysTick_Handler+0x58>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	4b02      	ldr	r3, [pc, #8]	; (80002e0 <SysTick_Handler+0x58>)
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	46c0      	nop			; (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b002      	add	sp, #8
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000020 	.word	0x20000020
 80002e4:	2000001c 	.word	0x2000001c
 80002e8:	48000414 	.word	0x48000414

080002ec <LED_Set>:

/* ****************************************************************************
 * FIJAR EL ESTADO DE xxx
 * ************************************************************************* */

void  LED_Set(uint32_t stat){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	ImageLED = stat;
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <LED_Set+0x18>)
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	601a      	str	r2, [r3, #0]
//	return(stat);
}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	46bd      	mov	sp, r7
 80002fe:	b002      	add	sp, #8
 8000300:	bd80      	pop	{r7, pc}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	2000001c 	.word	0x2000001c

08000308 <SERIE_Ini>:

/* ****************************************************************************
 * INICIALIZACIONES HARDWARE
 * ************************************************************************* */

void SERIE_Ini(){
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0

}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}

08000312 <SWITCH_Ini>:

/* ****************************************************************************
 * INICIALIZACIONES HARDWARE
 * ************************************************************************* */

void SWITCH_Ini(){
 8000312:	b580      	push	{r7, lr}
 8000314:	af00      	add	r7, sp, #0

}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <CLOCK_Ini>:

/* ****************************************************************************
 * INICIALIZACIONES HARDWARE
 * ************************************************************************* */

void CLOCK_Ini(uint32_t CLK, uint32_t P_DIV){
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]

    /* ---- INICIALIZACIONES: TEMPORIZADOR DE SISTEMA ---------------------- */

    *STK_RVR = (CLK/P_DIV) - 1;         /* Top value */
 8000326:	6839      	ldr	r1, [r7, #0]
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f7ff feed 	bl	8000108 <__udivsi3>
 800032e:	0003      	movs	r3, r0
 8000330:	001a      	movs	r2, r3
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <CLOCK_Ini+0x64>)
 8000334:	3a01      	subs	r2, #1
 8000336:	601a      	str	r2, [r3, #0]
    *STK_RVR = (CLK/P_DIV) - 1;         /* Top value */
 8000338:	6839      	ldr	r1, [r7, #0]
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f7ff fee4 	bl	8000108 <__udivsi3>
 8000340:	0003      	movs	r3, r0
 8000342:	001a      	movs	r2, r3
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <CLOCK_Ini+0x64>)
 8000346:	3a01      	subs	r2, #1
 8000348:	601a      	str	r2, [r3, #0]

    *STK_CSR = 0x0005;              /* Enable & select processor clock */
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <CLOCK_Ini+0x68>)
 800034c:	2205      	movs	r2, #5
 800034e:	601a      	str	r2, [r3, #0]
    *STK_CSR |= 0x0002;            /* Enable interrupt request */
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <CLOCK_Ini+0x68>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <CLOCK_Ini+0x68>)
 8000356:	2102      	movs	r1, #2
 8000358:	430a      	orrs	r2, r1
 800035a:	601a      	str	r2, [r3, #0]

    *SHPR3 &= ~0x33000000;         /* Low priority (high value) */
 800035c:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <CLOCK_Ini+0x6c>)
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <CLOCK_Ini+0x6c>)
 8000362:	490a      	ldr	r1, [pc, #40]	; (800038c <CLOCK_Ini+0x70>)
 8000364:	400a      	ands	r2, r1
 8000366:	601a      	str	r2, [r3, #0]
    *SHPR3 |=  0xCC000000;         /* Low priority (high value) */
 8000368:	4b07      	ldr	r3, [pc, #28]	; (8000388 <CLOCK_Ini+0x6c>)
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <CLOCK_Ini+0x6c>)
 800036e:	21cc      	movs	r1, #204	; 0xcc
 8000370:	0609      	lsls	r1, r1, #24
 8000372:	430a      	orrs	r2, r1
 8000374:	601a      	str	r2, [r3, #0]
}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	b002      	add	sp, #8
 800037c:	bd80      	pop	{r7, pc}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	e000e014 	.word	0xe000e014
 8000384:	e000e010 	.word	0xe000e010
 8000388:	e000ed20 	.word	0xe000ed20
 800038c:	ccffffff 	.word	0xccffffff

08000390 <SYSTEM_Ini>:

/* ****************************************************************************
 * INICIALIZACIONES HARDWARE
 * ************************************************************************* */

void SYSTEM_Ini(){
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0

	// Init Ports
	*RCC_AHBENR |= 0x007E0000;  /* ENABLE ALL PORTS (COMMON) */
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <SYSTEM_Ini+0x44>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <SYSTEM_Ini+0x44>)
 800039a:	21fc      	movs	r1, #252	; 0xfc
 800039c:	03c9      	lsls	r1, r1, #15
 800039e:	430a      	orrs	r2, r1
 80003a0:	601a      	str	r2, [r3, #0]

	// Init Drivers
	CLOCK_Ini(CLK,RITHM);
 80003a2:	23fa      	movs	r3, #250	; 0xfa
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	4a0c      	ldr	r2, [pc, #48]	; (80003d8 <SYSTEM_Ini+0x48>)
 80003a8:	0019      	movs	r1, r3
 80003aa:	0010      	movs	r0, r2
 80003ac:	f7ff ffb6 	bl	800031c <CLOCK_Ini>

	ANALOG_Ini();
 80003b0:	f7ff ff42 	bl	8000238 <ANALOG_Ini>
	BUZZ_Ini();
 80003b4:	f7ff ff45 	bl	8000242 <BUZZ_Ini>
	CAN_Ini();
 80003b8:	f7ff ff48 	bl	800024c <CAN_Ini>
	I2C_Ini();
 80003bc:	f7ff ff4b 	bl	8000256 <I2C_Ini>
	LED_Ini();
 80003c0:	f7ff ff4e 	bl	8000260 <LED_Ini>
	SERIE_Ini();
 80003c4:	f7ff ffa0 	bl	8000308 <SERIE_Ini>
	SWITCH_Ini();
 80003c8:	f7ff ffa3 	bl	8000312 <SWITCH_Ini>

}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	40021014 	.word	0x40021014
 80003d8:	007a1200 	.word	0x007a1200

080003dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003dc:	480d      	ldr	r0, [pc, #52]	; (8000414 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003e0:	e000      	b.n	80003e4 <Reset_Handler+0x8>
 80003e2:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e4:	480c      	ldr	r0, [pc, #48]	; (8000418 <LoopForever+0x6>)
  ldr r1, =_edata
 80003e6:	490d      	ldr	r1, [pc, #52]	; (800041c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e8:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <LoopForever+0xe>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ec:	e002      	b.n	80003f4 <LoopCopyDataInit>

080003ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f2:	3304      	adds	r3, #4

080003f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f8:	d3f9      	bcc.n	80003ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fa:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003fc:	4c0a      	ldr	r4, [pc, #40]	; (8000428 <LoopForever+0x16>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000400:	e001      	b.n	8000406 <LoopFillZerobss>

08000402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000404:	3204      	adds	r2, #4

08000406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000408:	d3fb      	bcc.n	8000402 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800040a:	f000 f811 	bl	8000430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040e:	f7ff ff07 	bl	8000220 <main>

08000412 <LoopForever>:

LoopForever:
    b LoopForever
 8000412:	e7fe      	b.n	8000412 <LoopForever>
  ldr   r0, =_estack
 8000414:	20001800 	.word	0x20001800
  ldr r0, =_sdata
 8000418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800041c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000420:	08000498 	.word	0x08000498
  ldr r2, =_sbss
 8000424:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000428:	20000024 	.word	0x20000024

0800042c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800042c:	e7fe      	b.n	800042c <ADC_COMP_IRQHandler>
	...

08000430 <__libc_init_array>:
 8000430:	b570      	push	{r4, r5, r6, lr}
 8000432:	2600      	movs	r6, #0
 8000434:	4d0c      	ldr	r5, [pc, #48]	; (8000468 <__libc_init_array+0x38>)
 8000436:	4c0d      	ldr	r4, [pc, #52]	; (800046c <__libc_init_array+0x3c>)
 8000438:	1b64      	subs	r4, r4, r5
 800043a:	10a4      	asrs	r4, r4, #2
 800043c:	42a6      	cmp	r6, r4
 800043e:	d109      	bne.n	8000454 <__libc_init_array+0x24>
 8000440:	2600      	movs	r6, #0
 8000442:	f000 f819 	bl	8000478 <_init>
 8000446:	4d0a      	ldr	r5, [pc, #40]	; (8000470 <__libc_init_array+0x40>)
 8000448:	4c0a      	ldr	r4, [pc, #40]	; (8000474 <__libc_init_array+0x44>)
 800044a:	1b64      	subs	r4, r4, r5
 800044c:	10a4      	asrs	r4, r4, #2
 800044e:	42a6      	cmp	r6, r4
 8000450:	d105      	bne.n	800045e <__libc_init_array+0x2e>
 8000452:	bd70      	pop	{r4, r5, r6, pc}
 8000454:	00b3      	lsls	r3, r6, #2
 8000456:	58eb      	ldr	r3, [r5, r3]
 8000458:	4798      	blx	r3
 800045a:	3601      	adds	r6, #1
 800045c:	e7ee      	b.n	800043c <__libc_init_array+0xc>
 800045e:	00b3      	lsls	r3, r6, #2
 8000460:	58eb      	ldr	r3, [r5, r3]
 8000462:	4798      	blx	r3
 8000464:	3601      	adds	r6, #1
 8000466:	e7f2      	b.n	800044e <__libc_init_array+0x1e>
 8000468:	08000490 	.word	0x08000490
 800046c:	08000490 	.word	0x08000490
 8000470:	08000490 	.word	0x08000490
 8000474:	08000494 	.word	0x08000494

08000478 <_init>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr

08000484 <_fini>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048a:	bc08      	pop	{r3}
 800048c:	469e      	mov	lr, r3
 800048e:	4770      	bx	lr
